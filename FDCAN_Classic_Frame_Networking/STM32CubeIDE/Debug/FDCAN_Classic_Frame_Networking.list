
FDCAN_Classic_Frame_Networking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005280  08005280  00006280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  00007024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080052b0  080052b0  00007024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080052b0  080052b0  00007024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b0  080052b0  000062b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052b4  080052b4  000062b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080052b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000024  080052dc  00007024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080052dc  00007108  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000d47d  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000082  00000000  00000000  000144d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000c7ba  00000000  00000000  00014559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c66  00000000  00000000  00020d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a60  00000000  00000000  00022980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00131019  00000000  00000000  000233e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000007b4  00000000  00000000  001543f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000304f7  00000000  00000000  00154bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001850a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a20  00000000  00000000  001850e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000024 	.word	0x20000024
 8000268:	00000000 	.word	0x00000000
 800026c:	08005268 	.word	0x08005268

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000028 	.word	0x20000028
 8000288:	08005268 	.word	0x08005268

0800028c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f000 fc2e 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	@ (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	@ (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f004 ffb1 	bl	8005220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f000 f80f 	bl	80002e0 <main>

080002c2 <LoopForever>:

LoopForever:
    b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80002d0:	080052b8 	.word	0x080052b8
  ldr r2, =_sbss
 80002d4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80002d8:	20000108 	.word	0x20000108

080002dc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC1_IRQHandler>
	...

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e6:	f000 fc7f 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ea:	f000 f85d 	bl	80003a8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Configure LED1 and LED3 */
  BSP_LED_Init(LED1);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f000 fa74 	bl	80007dc <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80002f4:	2002      	movs	r0, #2
 80002f6:	f000 fa71 	bl	80007dc <BSP_LED_Init>

  /* Configure USER push-button in interrupt mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80002fa:	2101      	movs	r1, #1
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fb61 	bl	80009c4 <BSP_PB_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000302:	f000 f913 	bl	800052c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000306:	f000 f8bf 	bl	8000488 <MX_FDCAN1_Init>
  MX_ICACHE_Init();
 800030a:	f000 f903 	bl	8000514 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */

  /* Configure reception filter to Rx FIFO 0 */
  FDCAN_FilterTypeDef        sFilterConfig;
  sFilterConfig.IdType       = FDCAN_STANDARD_ID;
 800030e:	2300      	movs	r3, #0
 8000310:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex  = 0U;
 8000312:	2300      	movs	r3, #0
 8000314:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType   = FDCAN_FILTER_MASK;
 8000316:	2302      	movs	r3, #2
 8000318:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800031a:	2301      	movs	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1    = TX_ID;
 800031e:	f240 4344 	movw	r3, #1092	@ 0x444
 8000322:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2    = 0x7FF;
 8000324:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000328:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 800032a:	463b      	mov	r3, r7
 800032c:	4619      	mov	r1, r3
 800032e:	481c      	ldr	r0, [pc, #112]	@ (80003a0 <main+0xc0>)
 8000330:	f001 f8ae 	bl	8001490 <HAL_FDCAN_ConfigFilter>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <main+0x5e>
  {
    Error_Handler();
 800033a:	f000 f963 	bl	8000604 <Error_Handler>
    *    - Reject non matching frames with STD ID and EXT ID
    */


  /* Activate Rx FIFO 0 new message notification */
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0U) != HAL_OK)
 800033e:	2200      	movs	r2, #0
 8000340:	2101      	movs	r1, #1
 8000342:	4817      	ldr	r0, [pc, #92]	@ (80003a0 <main+0xc0>)
 8000344:	f001 fa72 	bl	800182c <HAL_FDCAN_ActivateNotification>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <main+0x72>
  {
    Error_Handler();
 800034e:	f000 f959 	bl	8000604 <Error_Handler>
  }

  /* Prepare Tx message Header */
  txHeader.Identifier          = TX_ID;
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <main+0xc4>)
 8000354:	f240 4244 	movw	r2, #1092	@ 0x444
 8000358:	601a      	str	r2, [r3, #0]
  txHeader.IdType              = FDCAN_STANDARD_ID;
 800035a:	4b12      	ldr	r3, [pc, #72]	@ (80003a4 <main+0xc4>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8000360:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <main+0xc4>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  txHeader.DataLength          = FDCAN_DLC_BYTES_2;
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <main+0xc4>)
 8000368:	2202      	movs	r2, #2
 800036a:	60da      	str	r2, [r3, #12]
  txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800036c:	4b0d      	ldr	r3, [pc, #52]	@ (80003a4 <main+0xc4>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
  txHeader.BitRateSwitch       = FDCAN_BRS_OFF;
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <main+0xc4>)
 8000374:	2200      	movs	r2, #0
 8000376:	615a      	str	r2, [r3, #20]
  txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 8000378:	4b0a      	ldr	r3, [pc, #40]	@ (80003a4 <main+0xc4>)
 800037a:	2200      	movs	r2, #0
 800037c:	619a      	str	r2, [r3, #24]
  txHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <main+0xc4>)
 8000380:	2200      	movs	r2, #0
 8000382:	61da      	str	r2, [r3, #28]
  txHeader.MessageMarker       = 0U;
 8000384:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <main+0xc4>)
 8000386:	2200      	movs	r2, #0
 8000388:	621a      	str	r2, [r3, #32]

  /* Start FDCAN controller */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <main+0xc0>)
 800038c:	f001 f8da 	bl	8001544 <HAL_FDCAN_Start>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d002      	beq.n	800039c <main+0xbc>
  {
    Error_Handler();
 8000396:	f000 f935 	bl	8000604 <Error_Handler>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <main+0xbc>
 80003a0:	20000040 	.word	0x20000040
 80003a4:	200000cc 	.word	0x200000cc

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b09c      	sub	sp, #112	@ 0x70
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0320 	add.w	r3, r7, #32
 80003b2:	2250      	movs	r2, #80	@ 0x50
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f004 ff2a 	bl	8005210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	f107 0308 	add.w	r3, r7, #8
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
 80003cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000480 <SystemClock_Config+0xd8>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	4a2b      	ldr	r2, [pc, #172]	@ (8000480 <SystemClock_Config+0xd8>)
 80003d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80003d8:	6113      	str	r3, [r2, #16]
 80003da:	4b29      	ldr	r3, [pc, #164]	@ (8000480 <SystemClock_Config+0xd8>)
 80003dc:	691b      	ldr	r3, [r3, #16]
 80003de:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003e6:	bf00      	nop
 80003e8:	4b25      	ldr	r3, [pc, #148]	@ (8000480 <SystemClock_Config+0xd8>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	f003 0308 	and.w	r3, r3, #8
 80003f0:	2b08      	cmp	r3, #8
 80003f2:	d1f9      	bne.n	80003e8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f4:	2301      	movs	r3, #1
 80003f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 80003f8:	f44f 13a8 	mov.w	r3, #1376256	@ 0x150000
 80003fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000402:	2303      	movs	r3, #3
 8000404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000406:	2301      	movs	r3, #1
 8000408:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 800040a:	2310      	movs	r3, #16
 800040c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800040e:	2302      	movs	r3, #2
 8000410:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000412:	2302      	movs	r3, #2
 8000414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000416:	2302      	movs	r3, #2
 8000418:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 800041a:	230c      	movs	r3, #12
 800041c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800041e:	2300      	movs	r3, #0
 8000420:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000426:	f107 0320 	add.w	r3, r7, #32
 800042a:	4618      	mov	r0, r3
 800042c:	f001 fefe 	bl	800222c <HAL_RCC_OscConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000436:	f000 f8e5 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043a:	231f      	movs	r3, #31
 800043c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	2303      	movs	r3, #3
 8000440:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000442:	2300      	movs	r3, #0
 8000444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000446:	2300      	movs	r3, #0
 8000448:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044a:	2300      	movs	r3, #0
 800044c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	2103      	movs	r1, #3
 8000458:	4618      	mov	r0, r3
 800045a:	f002 fb1f 	bl	8002a9c <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000464:	f000 f8ce 	bl	8000604 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_1);
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <SystemClock_Config+0xdc>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000470:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <SystemClock_Config+0xdc>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	3770      	adds	r7, #112	@ 0x70
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	44020800 	.word	0x44020800
 8000484:	40022000 	.word	0x40022000

08000488 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800048c:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <MX_FDCAN1_Init+0x84>)
 800048e:	4a20      	ldr	r2, [pc, #128]	@ (8000510 <MX_FDCAN1_Init+0x88>)
 8000490:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000492:	4b1e      	ldr	r3, [pc, #120]	@ (800050c <MX_FDCAN1_Init+0x84>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000498:	4b1c      	ldr	r3, [pc, #112]	@ (800050c <MX_FDCAN1_Init+0x84>)
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800049e:	4b1b      	ldr	r3, [pc, #108]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80004a4:	4b19      	ldr	r3, [pc, #100]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80004aa:	4b18      	ldr	r3, [pc, #96]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 80004b0:	4b16      	ldr	r3, [pc, #88]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 32;
 80004bc:	4b13      	ldr	r3, [pc, #76]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004be:	2220      	movs	r2, #32
 80004c0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 95;
 80004c2:	4b12      	ldr	r3, [pc, #72]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004c4:	225f      	movs	r2, #95	@ 0x5f
 80004c6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 32;
 80004c8:	4b10      	ldr	r3, [pc, #64]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004ca:	2220      	movs	r2, #32
 80004cc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 5;
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004d0:	2205      	movs	r2, #5
 80004d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 10;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004d6:	220a      	movs	r2, #10
 80004d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 11;
 80004da:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004dc:	220b      	movs	r2, #11
 80004de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80004e6:	4b09      	ldr	r3, [pc, #36]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80004ec:	4b07      	ldr	r3, [pc, #28]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80004f2:	4b06      	ldr	r3, [pc, #24]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80004f8:	4804      	ldr	r0, [pc, #16]	@ (800050c <MX_FDCAN1_Init+0x84>)
 80004fa:	f000 fe6f 	bl	80011dc <HAL_FDCAN_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000504:	f000 f87e 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000040 	.word	0x20000040
 8000510:	4000a400 	.word	0x4000a400

08000514 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000518:	f001 fe78 	bl	800220c <HAL_ICACHE_Enable>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000522:	f000 f86f 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000532:	4b12      	ldr	r3, [pc, #72]	@ (800057c <MX_GPIO_Init+0x50>)
 8000534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000538:	4a10      	ldr	r2, [pc, #64]	@ (800057c <MX_GPIO_Init+0x50>)
 800053a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800053e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000542:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_GPIO_Init+0x50>)
 8000544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000550:	4b0a      	ldr	r3, [pc, #40]	@ (800057c <MX_GPIO_Init+0x50>)
 8000552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000556:	4a09      	ldr	r2, [pc, #36]	@ (800057c <MX_GPIO_Init+0x50>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000560:	4b06      	ldr	r3, [pc, #24]	@ (800057c <MX_GPIO_Init+0x50>)
 8000562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	44020c00 	.word	0x44020c00

08000580 <HAL_FDCAN_RxFifo0Callback>:
  *         the configuration information for the specified FDCAN.
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0U)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d00d      	beq.n	80005b0 <HAL_FDCAN_RxFifo0Callback+0x30>
  {
    /* Retrieve Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8000596:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8000598:	2140      	movs	r1, #64	@ 0x40
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	f001 f83e 	bl	800161c <HAL_FDCAN_GetRxMessage>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
      Error_Handler();
 80005a6:	f000 f82d 	bl	8000604 <Error_Handler>

    /* Compare received RX message to expected data. Ignore if not matching. */


      /* Turn LED1 on */
      BSP_LED_On(LED1);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f98c 	bl	80008c8 <BSP_LED_On>

  }
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000f0 	.word	0x200000f0
 80005bc:	200000a4 	.word	0x200000a4

080005c0 <BSP_PB_Callback>:
  * @brief  BSP USER push-button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d10f      	bne.n	80005f0 <BSP_PB_Callback+0x30>
  {
    /* Turn LED1 off */
    BSP_LED_Off(LED1);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 f9a3 	bl	800091c <BSP_LED_Off>

    /* Add message to TX FIFO */
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK)
 80005d6:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <BSP_PB_Callback+0x38>)
 80005d8:	4908      	ldr	r1, [pc, #32]	@ (80005fc <BSP_PB_Callback+0x3c>)
 80005da:	4809      	ldr	r0, [pc, #36]	@ (8000600 <BSP_PB_Callback+0x40>)
 80005dc:	f000 ffda 	bl	8001594 <HAL_FDCAN_AddMessageToTxFifoQ>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <BSP_PB_Callback+0x2a>
    {
      Error_Handler();
 80005e6:	f000 f80d 	bl	8000604 <Error_Handler>
    }

    /* Delay for simple button debounce */
    HAL_Delay(100U);
 80005ea:	2064      	movs	r0, #100	@ 0x64
 80005ec:	f000 fbba 	bl	8000d64 <HAL_Delay>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	08005280 	.word	0x08005280
 80005fc:	200000cc 	.word	0x200000cc
 8000600:	20000040 	.word	0x20000040

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* User can add his own implementation to report the HAL error return state */

  while (1)
  {
    /* Toggle LED3 on */
    BSP_LED_Toggle(LED3);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 f9b1 	bl	8000970 <BSP_LED_Toggle>

    /* 1s delay */
    HAL_Delay(1000U);
 800060e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000612:	f000 fba7 	bl	8000d64 <HAL_Delay>
    BSP_LED_Toggle(LED3);
 8000616:	bf00      	nop
 8000618:	e7f6      	b.n	8000608 <Error_Handler+0x4>

0800061a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0cc      	sub	sp, #304	@ 0x130
 800062c:	af00      	add	r7, sp, #0
 800062e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000632:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000636:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000648:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800064c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000650:	4618      	mov	r0, r3
 8000652:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000656:	461a      	mov	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f004 fdd9 	bl	8005210 <memset>
  if(hfdcan->Instance==FDCAN1)
 800065e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000662:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a37      	ldr	r2, [pc, #220]	@ (8000748 <HAL_FDCAN_MspInit+0x120>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d166      	bne.n	800073e <HAL_FDCAN_MspInit+0x116>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000674:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	f04f 0304 	mov.w	r3, #4
 8000680:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 8000684:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000688:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800068c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000690:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fcff 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <HAL_FDCAN_MspInit+0x80>
    {
      Error_Handler();
 80006a4:	f7ff ffae 	bl	8000604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006a8:	4b28      	ldr	r3, [pc, #160]	@ (800074c <HAL_FDCAN_MspInit+0x124>)
 80006aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80006ae:	4a27      	ldr	r2, [pc, #156]	@ (800074c <HAL_FDCAN_MspInit+0x124>)
 80006b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006b4:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80006b8:	4b24      	ldr	r3, [pc, #144]	@ (800074c <HAL_FDCAN_MspInit+0x124>)
 80006ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80006be:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 80006c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006c6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80006d4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <HAL_FDCAN_MspInit+0x124>)
 80006d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006dc:	4a1b      	ldr	r2, [pc, #108]	@ (800074c <HAL_FDCAN_MspInit+0x124>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <HAL_FDCAN_MspInit+0x124>)
 80006e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80006ec:	f003 0208 	and.w	r2, r3, #8
 80006f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006f4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80006fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000702:	681b      	ldr	r3, [r3, #0]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000704:	2303      	movs	r3, #3
 8000706:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800071c:	2309      	movs	r3, #9
 800071e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000722:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000726:	4619      	mov	r1, r3
 8000728:	4809      	ldr	r0, [pc, #36]	@ (8000750 <HAL_FDCAN_MspInit+0x128>)
 800072a:	f001 fbdf 	bl	8001eec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2027      	movs	r0, #39	@ 0x27
 8000734:	f000 fbf2 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000738:	2027      	movs	r0, #39	@ 0x27
 800073a:	f000 fc09 	bl	8000f50 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800073e:	bf00      	nop
 8000740:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	4000a400 	.word	0x4000a400
 800074c:	44020c00 	.word	0x44020c00
 8000750:	42020c00 	.word	0x42020c00

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000766:	bf00      	nop
 8000768:	e7fd      	b.n	8000766 <HardFault_Handler+0x4>

0800076a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800076e:	bf00      	nop
 8000770:	e7fd      	b.n	800076e <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	bf00      	nop
 8000778:	e7fd      	b.n	8000776 <BusFault_Handler+0x4>

0800077a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077e:	bf00      	nop
 8000780:	e7fd      	b.n	800077e <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b0:	f000 fab8 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <FDCAN1_IT0_IRQHandler+0x10>)
 80007be:	f001 f91b 	bl	80019f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000040 	.word	0x20000040

080007cc <EXTI13_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief  This function handles external line 13 interrupt request.
  */
void EXTI13_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_USER);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f000 f96f 	bl	8000ab4 <BSP_PB_IRQHandler>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d009      	beq.n	8000804 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d006      	beq.n	8000804 <BSP_LED_Init+0x28>
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d003      	beq.n	8000804 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80007fc:	f06f 0301 	mvn.w	r3, #1
 8000800:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000802:	e055      	b.n	80008b0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10f      	bne.n	800082a <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <BSP_LED_Init+0xe0>)
 800080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000810:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <BSP_LED_Init+0xe0>)
 8000812:	f043 0320 	orr.w	r3, r3, #32
 8000816:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <BSP_LED_Init+0xe0>)
 800081c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000820:	f003 0320 	and.w	r3, r3, #32
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	e021      	b.n	800086e <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d10f      	bne.n	8000850 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <BSP_LED_Init+0xe0>)
 8000832:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000836:	4a21      	ldr	r2, [pc, #132]	@ (80008bc <BSP_LED_Init+0xe0>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <BSP_LED_Init+0xe0>)
 8000842:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	e00e      	b.n	800086e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <BSP_LED_Init+0xe0>)
 8000852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000856:	4a19      	ldr	r2, [pc, #100]	@ (80008bc <BSP_LED_Init+0xe0>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800085c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <BSP_LED_Init+0xe0>)
 8000862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	4a13      	ldr	r2, [pc, #76]	@ (80008c0 <BSP_LED_Init+0xe4>)
 8000872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000876:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <BSP_LED_Init+0xe8>)
 8000888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088c:	f107 0218 	add.w	r2, r7, #24
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fb2a 	bl	8001eec <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <BSP_LED_Init+0xe8>)
 800089c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <BSP_LED_Init+0xe4>)
 80008a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a8:	2200      	movs	r2, #0
 80008aa:	4619      	mov	r1, r3
 80008ac:	f001 fc7c 	bl	80021a8 <HAL_GPIO_WritePin>
  }

  return ret;
 80008b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3730      	adds	r7, #48	@ 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	44020c00 	.word	0x44020c00
 80008c0:	08005284 	.word	0x08005284
 80008c4:	20000000 	.word	0x20000000

080008c8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d009      	beq.n	80008f0 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <BSP_LED_On+0x28>
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d003      	beq.n	80008f0 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80008e8:	f06f 0301 	mvn.w	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e00b      	b.n	8000908 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4a08      	ldr	r2, [pc, #32]	@ (8000914 <BSP_LED_On+0x4c>)
 80008f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <BSP_LED_On+0x50>)
 80008fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000900:	2201      	movs	r2, #1
 8000902:	4619      	mov	r1, r3
 8000904:	f001 fc50 	bl	80021a8 <HAL_GPIO_WritePin>
  }

  return ret;
 8000908:	68fb      	ldr	r3, [r7, #12]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000000 	.word	0x20000000
 8000918:	08005284 	.word	0x08005284

0800091c <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d009      	beq.n	8000944 <BSP_LED_Off+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d006      	beq.n	8000944 <BSP_LED_Off+0x28>
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d003      	beq.n	8000944 <BSP_LED_Off+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800093c:	f06f 0301 	mvn.w	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e00b      	b.n	800095c <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <BSP_LED_Off+0x4c>)
 8000948:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4a07      	ldr	r2, [pc, #28]	@ (800096c <BSP_LED_Off+0x50>)
 8000950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000954:	2200      	movs	r2, #0
 8000956:	4619      	mov	r1, r3
 8000958:	f001 fc26 	bl	80021a8 <HAL_GPIO_WritePin>
  }

  return ret;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000
 800096c:	08005284 	.word	0x08005284

08000970 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d009      	beq.n	8000998 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <BSP_LED_Toggle+0x28>
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d003      	beq.n	8000998 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000990:	f06f 0301 	mvn.w	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e00b      	b.n	80009b0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <BSP_LED_Toggle+0x4c>)
 800099c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4907      	ldr	r1, [pc, #28]	@ (80009c0 <BSP_LED_Toggle+0x50>)
 80009a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4610      	mov	r0, r2
 80009ac:	f001 fc14 	bl	80021d8 <HAL_GPIO_TogglePin>
  }

  return ret;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000000 	.word	0x20000000
 80009c0:	08005284 	.word	0x08005284

080009c4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80009d4:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <BSP_PB_Init+0xd4>)
 80009d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009da:	4a2f      	ldr	r2, [pc, #188]	@ (8000a98 <BSP_PB_Init+0xd4>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a98 <BSP_PB_Init+0xd4>)
 80009e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80009f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80009f8:	2302      	movs	r3, #2
 80009fa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10c      	bne.n	8000a20 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	4a23      	ldr	r2, [pc, #140]	@ (8000a9c <BSP_PB_Init+0xd8>)
 8000a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a12:	f107 020c 	add.w	r2, r7, #12
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa67 	bl	8001eec <HAL_GPIO_Init>
 8000a1e:	e036      	b.n	8000a8e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <BSP_PB_Init+0xdc>)
 8000a22:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <BSP_PB_Init+0xd8>)
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	f107 020c 	add.w	r2, r7, #12
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fa5a 	bl	8001eec <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4a18      	ldr	r2, [pc, #96]	@ (8000aa4 <BSP_PB_Init+0xe0>)
 8000a44:	441a      	add	r2, r3
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4917      	ldr	r1, [pc, #92]	@ (8000aa8 <BSP_PB_Init+0xe4>)
 8000a4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4610      	mov	r0, r2
 8000a52:	f000 fb67 	bl	8001124 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4a10      	ldr	r2, [pc, #64]	@ (8000aa4 <BSP_PB_Init+0xe0>)
 8000a62:	1898      	adds	r0, r3, r2
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	4a11      	ldr	r2, [pc, #68]	@ (8000aac <BSP_PB_Init+0xe8>)
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f000 fb2c 	bl	80010cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000a74:	2018      	movs	r0, #24
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <BSP_PB_Init+0xec>)
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	f000 fa4b 	bl	8000f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000a86:	2318      	movs	r3, #24
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 fa61 	bl	8000f50 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	44020c00 	.word	0x44020c00
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	10110000 	.word	0x10110000
 8000aa4:	200000f8 	.word	0x200000f8
 8000aa8:	0800528c 	.word	0x0800528c
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	20000014 	.word	0x20000014

08000ab4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	4413      	add	r3, r2
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <BSP_PB_IRQHandler+0x28>)
 8000aca:	4413      	add	r3, r2
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fb3d 	bl	800114c <HAL_EXTI_IRQHandler>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000f8 	.word	0x200000f8

08000ae0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fd6b 	bl	80005c0 <BSP_PB_Callback>
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000af6:	4b35      	ldr	r3, [pc, #212]	@ (8000bcc <SystemInit+0xdc>)
 8000af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000afc:	4a33      	ldr	r2, [pc, #204]	@ (8000bcc <SystemInit+0xdc>)
 8000afe:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b02:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000b06:	4b32      	ldr	r3, [pc, #200]	@ (8000bd0 <SystemInit+0xe0>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000b0c:	4b30      	ldr	r3, [pc, #192]	@ (8000bd0 <SystemInit+0xe0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000b12:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd0 <SystemInit+0xe0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000b18:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <SystemInit+0xe0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	492c      	ldr	r1, [pc, #176]	@ (8000bd0 <SystemInit+0xe0>)
 8000b1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd4 <SystemInit+0xe4>)
 8000b20:	4013      	ands	r3, r2
 8000b22:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000b24:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd0 <SystemInit+0xe0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8000b2a:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <SystemInit+0xe0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000b30:	4b27      	ldr	r3, [pc, #156]	@ (8000bd0 <SystemInit+0xe0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <SystemInit+0xe0>)
 8000b38:	4a27      	ldr	r2, [pc, #156]	@ (8000bd8 <SystemInit+0xe8>)
 8000b3a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	@ (8000bd0 <SystemInit+0xe0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <SystemInit+0xe0>)
 8000b44:	4a24      	ldr	r2, [pc, #144]	@ (8000bd8 <SystemInit+0xe8>)
 8000b46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000b48:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <SystemInit+0xe0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	@ (8000bd0 <SystemInit+0xe0>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	@ (8000bd8 <SystemInit+0xe8>)
 8000b52:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <SystemInit+0xe0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <SystemInit+0xe0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd0 <SystemInit+0xe0>)
 8000b60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <SystemInit+0xe0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b6c:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <SystemInit+0xdc>)
 8000b6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b72:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <SystemInit+0xec>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8000b7c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8000b84:	d003      	beq.n	8000b8e <SystemInit+0x9e>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8000b8c:	d117      	bne.n	8000bbe <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <SystemInit+0xec>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <SystemInit+0xec>)
 8000b9c:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <SystemInit+0xf0>)
 8000b9e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <SystemInit+0xec>)
 8000ba2:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <SystemInit+0xf4>)
 8000ba4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <SystemInit+0xec>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <SystemInit+0xec>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <SystemInit+0xec>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a09      	ldr	r2, [pc, #36]	@ (8000bdc <SystemInit+0xec>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	61d3      	str	r3, [r2, #28]
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	44020c00 	.word	0x44020c00
 8000bd4:	eae2eae3 	.word	0xeae2eae3
 8000bd8:	01010280 	.word	0x01010280
 8000bdc:	40022000 	.word	0x40022000
 8000be0:	08192a3b 	.word	0x08192a3b
 8000be4:	4c5d6e7f 	.word	0x4c5d6e7f

08000be8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f98a 	bl	8000f06 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000bf2:	f002 f90b 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <HAL_Init+0x44>)
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	f003 030f 	and.w	r3, r3, #15
 8000c00:	490b      	ldr	r1, [pc, #44]	@ (8000c30 <HAL_Init+0x48>)
 8000c02:	5ccb      	ldrb	r3, [r1, r3]
 8000c04:	fa22 f303 	lsr.w	r3, r2, r3
 8000c08:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <HAL_Init+0x4c>)
 8000c0a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c0c:	2004      	movs	r0, #4
 8000c0e:	f000 f9cf 	bl	8000fb0 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f810 	bl	8000c38 <HAL_InitTick>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e002      	b.n	8000c28 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c22:	f7ff fcfa 	bl	800061a <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	44020c00 	.word	0x44020c00
 8000c30:	08005290 	.word	0x08005290
 8000c34:	20000018 	.word	0x20000018

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c44:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e05c      	b.n	8000d0a <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000c50:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <HAL_InitTick+0xe0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 0304 	and.w	r3, r3, #4
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d10c      	bne.n	8000c76 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d1c <HAL_InitTick+0xe4>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b2c      	ldr	r3, [pc, #176]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e037      	b.n	8000ce6 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000c76:	f000 f9f3 	bl	8001060 <HAL_SYSTICK_GetCLKSourceConfig>
 8000c7a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d023      	beq.n	8000cca <HAL_InitTick+0x92>
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d82d      	bhi.n	8000ce4 <HAL_InitTick+0xac>
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_InitTick+0x5e>
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d00d      	beq.n	8000cb0 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000c94:	e026      	b.n	8000ce4 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000c96:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <HAL_InitTick+0xe4>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cac:	60fb      	str	r3, [r7, #12]
        break;
 8000cae:	e01a      	b.n	8000ce6 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cb0:	4b18      	ldr	r3, [pc, #96]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cbe:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	60fb      	str	r3, [r7, #12]
        break;
 8000cc8:	e00d      	b.n	8000ce6 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_InitTick+0xdc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000cd8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	60fb      	str	r3, [r7, #12]
        break;
 8000ce2:	e000      	b.n	8000ce6 <HAL_InitTick+0xae>
        break;
 8000ce4:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f000 f940 	bl	8000f6c <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e009      	b.n	8000d0a <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	6879      	ldr	r1, [r7, #4]
 8000cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfe:	f000 f90d 	bl	8000f1c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000d02:	4a07      	ldr	r2, [pc, #28]	@ (8000d20 <HAL_InitTick+0xe8>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000020 	.word	0x20000020
 8000d18:	e000e010 	.word	0xe000e010
 8000d1c:	20000018 	.word	0x20000018
 8000d20:	2000001c 	.word	0x2000001c

08000d24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	@ (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000020 	.word	0x20000020
 8000d48:	20000104 	.word	0x20000104

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000104 	.word	0x20000104

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000020 	.word	0x20000020

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	@ (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	88fb      	ldrh	r3, [r7, #6]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	@ (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff4c 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
 8000f28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2a:	f7ff ff63 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	68b9      	ldr	r1, [r7, #8]
 8000f34:	6978      	ldr	r0, [r7, #20]
 8000f36:	f7ff ffb3 	bl	8000ea0 <NVIC_EncodePriority>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff82 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f48:	bf00      	nop
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff56 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00d      	b.n	8000f9e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000f8a:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <HAL_SYSTICK_Config+0x40>)
 8000f96:	f043 0303 	orr.w	r3, r3, #3
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	d844      	bhi.n	8001048 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fe7 	.word	0x08000fe7
 8000fc8:	08001005 	.word	0x08001005
 8000fcc:	08001027 	.word	0x08001027
 8000fd0:	08001049 	.word	0x08001049
 8000fd4:	08000fd9 	.word	0x08000fd9
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	6013      	str	r3, [r2, #0]
      break;
 8000fe4:	e031      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a1b      	ldr	r2, [pc, #108]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000fec:	f023 0304 	bic.w	r3, r3, #4
 8000ff0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ff4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000ff8:	4a18      	ldr	r2, [pc, #96]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ffa:	f023 030c 	bic.w	r3, r3, #12
 8000ffe:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001002:	e022      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001004:	4b14      	ldr	r3, [pc, #80]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a13      	ldr	r2, [pc, #76]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800100a:	f023 0304 	bic.w	r3, r3, #4
 800100e:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001016:	f023 030c 	bic.w	r3, r3, #12
 800101a:	4a10      	ldr	r2, [pc, #64]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001024:	e011      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001026:	4b0c      	ldr	r3, [pc, #48]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0b      	ldr	r2, [pc, #44]	@ (8001058 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800102c:	f023 0304 	bic.w	r3, r3, #4
 8001030:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001038:	f023 030c 	bic.w	r3, r3, #12
 800103c:	4a07      	ldr	r2, [pc, #28]	@ (800105c <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001046:	e000      	b.n	800104a <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001048:	bf00      	nop
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010
 800105c:	44020c00 	.word	0x44020c00

08001060 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001072:	2304      	movs	r3, #4
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	e01e      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800107a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b08      	cmp	r3, #8
 8001088:	d00f      	beq.n	80010aa <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d80f      	bhi.n	80010b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d003      	beq.n	80010a4 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 800109c:	e008      	b.n	80010b0 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
        break;
 80010a2:	e008      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
        break;
 80010a8:	e005      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 80010aa:	2302      	movs	r3, #2
 80010ac:	607b      	str	r3, [r7, #4]
        break;
 80010ae:	e002      	b.n	80010b6 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
        break;
 80010b4:	bf00      	nop
    }
  }
  return systick_source;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e010 	.word	0xe000e010
 80010c8:	44020c00 	.word	0x44020c00

080010cc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	460b      	mov	r3, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d011      	beq.n	8001108 <HAL_EXTI_RegisterCallback+0x3c>
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	dc13      	bgt.n	8001110 <HAL_EXTI_RegisterCallback+0x44>
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_EXTI_RegisterCallback+0x26>
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d007      	beq.n	8001100 <HAL_EXTI_RegisterCallback+0x34>
 80010f0:	e00e      	b.n	8001110 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
      break;
 80010fe:	e00a      	b.n	8001116 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
      break;
 8001106:	e006      	b.n	8001116 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	609a      	str	r2, [r3, #8]
      break;
 800110e:	e002      	b.n	8001116 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	75fb      	strb	r3, [r7, #23]
      break;
 8001114:	bf00      	nop
  }

  return status;
 8001116:	7dfb      	ldrb	r3, [r7, #23]
}
 8001118:	4618      	mov	r0, r3
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e003      	b.n	8001140 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800113e:	2300      	movs	r3, #0
  }
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0c1b      	lsrs	r3, r3, #16
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 031f 	and.w	r3, r3, #31
 8001168:	2201      	movs	r2, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	015a      	lsls	r2, r3, #5
 8001174:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <HAL_EXTI_IRQHandler+0x88>)
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d009      	beq.n	800119e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	015a      	lsls	r2, r3, #5
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <HAL_EXTI_IRQHandler+0x8c>)
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d009      	beq.n	80011cc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	4798      	blx	r3
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	4402200c 	.word	0x4402200c
 80011d8:	44022010 	.word	0x44022010

080011dc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e147      	b.n	800147e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d106      	bne.n	8001208 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fa10 	bl	8000628 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	699a      	ldr	r2, [r3, #24]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0210 	bic.w	r2, r2, #16
 8001216:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff fd98 	bl	8000d4c <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800121e:	e012      	b.n	8001246 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001220:	f7ff fd94 	bl	8000d4c <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b0a      	cmp	r3, #10
 800122c:	d90b      	bls.n	8001246 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2203      	movs	r2, #3
 800123e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e11b      	b.n	800147e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b08      	cmp	r3, #8
 8001252:	d0e5      	beq.n	8001220 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001264:	f7ff fd72 	bl	8000d4c <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800126a:	e012      	b.n	8001292 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800126c:	f7ff fd6e 	bl	8000d4c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b0a      	cmp	r3, #10
 8001278:	d90b      	bls.n	8001292 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0f5      	b.n	800147e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0e5      	beq.n	800126c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0202 	orr.w	r2, r2, #2
 80012ae:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a74      	ldr	r2, [pc, #464]	@ (8001488 <HAL_FDCAN_Init+0x2ac>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d103      	bne.n	80012c2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80012ba:	4a74      	ldr	r2, [pc, #464]	@ (800148c <HAL_FDCAN_Init+0x2b0>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7c1b      	ldrb	r3, [r3, #16]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d108      	bne.n	80012dc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	e007      	b.n	80012ec <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012ea:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	7c5b      	ldrb	r3, [r3, #17]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d108      	bne.n	8001306 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001302:	619a      	str	r2, [r3, #24]
 8001304:	e007      	b.n	8001316 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	699a      	ldr	r2, [r3, #24]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001314:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	7c9b      	ldrb	r3, [r3, #18]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800132c:	619a      	str	r2, [r3, #24]
 800132e:	e007      	b.n	8001340 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800133e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001364:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0210 	bic.w	r2, r2, #16
 8001374:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d108      	bne.n	8001390 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	699a      	ldr	r2, [r3, #24]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f042 0204 	orr.w	r2, r2, #4
 800138c:	619a      	str	r2, [r3, #24]
 800138e:	e02c      	b.n	80013ea <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d028      	beq.n	80013ea <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d01c      	beq.n	80013da <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013ae:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0210 	orr.w	r2, r2, #16
 80013be:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d110      	bne.n	80013ea <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	619a      	str	r2, [r3, #24]
 80013d8:	e007      	b.n	80013ea <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	699a      	ldr	r2, [r3, #24]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0220 	orr.w	r2, r2, #32
 80013e8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80013fa:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001402:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	3b01      	subs	r3, #1
 800140c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001412:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001414:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800141e:	d115      	bne.n	800144c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142a:	3b01      	subs	r3, #1
 800142c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800142e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	3b01      	subs	r3, #1
 8001436:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001438:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	3b01      	subs	r3, #1
 8001442:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001448:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800144a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	430a      	orrs	r2, r1
 800145e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 fc64 	bl	8001d30 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	4000a400 	.word	0x4000a400
 800148c:	4000a500 	.word	0x4000a500

08001490 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014a0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80014a2:	7dfb      	ldrb	r3, [r7, #23]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d002      	beq.n	80014ae <HAL_FDCAN_ConfigFilter+0x1e>
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d13d      	bne.n	800152a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d119      	bne.n	80014ea <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014c2:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80014ca:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e01d      	b.n	8001526 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	075a      	lsls	r2, r3, #29
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	079a      	lsls	r2, r3, #30
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4413      	add	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3304      	adds	r3, #4
 800151e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	e006      	b.n	8001538 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152e:	f043 0202 	orr.w	r2, r3, #2
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
  }
}
 8001538:	4618      	mov	r0, r3
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d110      	bne.n	800157a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	e006      	b.n	8001588 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157e:	f043 0204 	orr.w	r2, r3, #4
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
  }
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d12c      	bne.n	8001606 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e023      	b.n	8001614 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fc06 	bl	8001df4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80015f8:	2201      	movs	r2, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	409a      	lsls	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e006      	b.n	8001614 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160a:	f043 0208 	orr.w	r2, r3, #8
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800161c:	b480      	push	{r7}
 800161e:	b08b      	sub	sp, #44	@ 0x2c
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001634:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8001636:	7efb      	ldrb	r3, [r7, #27]
 8001638:	2b02      	cmp	r3, #2
 800163a:	f040 80e8 	bne.w	800180e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b40      	cmp	r3, #64	@ 0x40
 8001642:	d137      	bne.n	80016b4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0db      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001674:	d10a      	bne.n	800168c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800167e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001686:	d101      	bne.n	800168c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001688:	2301      	movs	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4413      	add	r3, r2
 800169e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	4613      	mov	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4413      	add	r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	440b      	add	r3, r1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b2:	e036      	b.n	8001722 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d107      	bne.n	80016d4 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0a3      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e4:	d10a      	bne.n	80016fc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016f6:	d101      	bne.n	80016fc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	4613      	mov	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d107      	bne.n	8001746 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	0c9b      	lsrs	r3, r3, #18
 800173c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	e005      	b.n	8001752 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	3304      	adds	r3, #4
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29a      	uxth	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	f003 020f 	and.w	r2, r3, #15
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0e1b      	lsrs	r3, r3, #24
 80017a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0fda      	lsrs	r2, r3, #31
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ba:	3304      	adds	r3, #4
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
 80017c6:	e00a      	b.n	80017de <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	441a      	add	r2, r3
 80017ce:	6839      	ldr	r1, [r7, #0]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	440b      	add	r3, r1
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80017d8:	6a3b      	ldr	r3, [r7, #32]
 80017da:	3301      	adds	r3, #1
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4a11      	ldr	r2, [pc, #68]	@ (8001828 <HAL_FDCAN_GetRxMessage+0x20c>)
 80017e4:	5cd3      	ldrb	r3, [r2, r3]
 80017e6:	461a      	mov	r2, r3
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d3ec      	bcc.n	80017c8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b40      	cmp	r3, #64	@ 0x40
 80017f2:	d105      	bne.n	8001800 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80017fe:	e004      	b.n	800180a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e006      	b.n	800181c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001812:	f043 0208 	orr.w	r2, r3, #8
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	372c      	adds	r7, #44	@ 0x2c
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	080052a0 	.word	0x080052a0

0800182c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800182c:	b480      	push	{r7}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800183e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001840:	7dfb      	ldrb	r3, [r7, #23]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d003      	beq.n	800184e <HAL_FDCAN_ActivateNotification+0x22>
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	2b02      	cmp	r3, #2
 800184a:	f040 80c8 	bne.w	80019de <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001854:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d03b      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d031      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f003 0304 	and.w	r3, r3, #4
 800188e:	2b00      	cmp	r3, #0
 8001890:	d027      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01d      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0310 	and.w	r3, r3, #16
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d013      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00c      	beq.n	80018f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d107      	bne.n	80018f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d13b      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d131      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d127      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d11d      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	d113      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00c      	beq.n	800198e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0202 	orr.w	r2, r2, #2
 800198c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e006      	b.n	80019ec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
  }
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	371c      	adds	r7, #28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	@ 0x30
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a06:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a14:	4013      	ands	r3, r2
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a44:	4013      	ands	r3, r2
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a4e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001a52:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a5a:	6a3a      	ldr	r2, [r7, #32]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a66:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a6a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a86:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00c      	beq.n	8001aae <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	099b      	lsrs	r3, r3, #6
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2240      	movs	r2, #64	@ 0x40
 8001aa6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f922 	bl	8001cf2 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01a      	beq.n	8001af0 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d014      	beq.n	8001af0 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ace:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ae6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ae8:	6939      	ldr	r1, [r7, #16]
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f8e2 	bl	8001cb4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d007      	beq.n	8001b06 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001afc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f8ac 	bl	8001c5e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b12:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fd32 	bl	8000580 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b28:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001b2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f8a1 	bl	8001c74 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	0a5b      	lsrs	r3, r3, #9
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00d      	beq.n	8001b5a <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	0a5b      	lsrs	r3, r3, #9
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b52:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f898 	bl	8001c8a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	09db      	lsrs	r3, r3, #7
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	09db      	lsrs	r3, r3, #7
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d013      	beq.n	8001b9a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001b7a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b92:	68f9      	ldr	r1, [r7, #12]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f882 	bl	8001c9e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	0b5b      	lsrs	r3, r3, #13
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	0b5b      	lsrs	r3, r3, #13
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bba:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f884 	bl	8001cca <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	0bdb      	lsrs	r3, r3, #15
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00d      	beq.n	8001bea <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	0bdb      	lsrs	r3, r3, #15
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001be2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f87a 	bl	8001cde <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	0b9b      	lsrs	r3, r3, #14
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d010      	beq.n	8001c18 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	0b9b      	lsrs	r3, r3, #14
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00a      	beq.n	8001c18 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001c26:	69f9      	ldr	r1, [r7, #28]
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f876 	bl	8001d1a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a3a      	ldr	r2, [r7, #32]
 8001c3a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f858 	bl	8001d06 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	@ 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001d38:	4b2c      	ldr	r3, [pc, #176]	@ (8001dec <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8001d3a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2b      	ldr	r2, [pc, #172]	@ (8001df0 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d103      	bne.n	8001d4e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001d4c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d5c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d82:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d8a:	061a      	lsls	r2, r3, #24
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e005      	b.n	8001dd0 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d3f3      	bcc.n	8001dc4 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	4000ac00 	.word	0x4000ac00
 8001df0:	4000a800 	.word	0x4000a800

08001df4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10a      	bne.n	8001e20 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001e12:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	e00a      	b.n	8001e36 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001e28:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001e2e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001e30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e34:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e40:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001e46:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001e4c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	3304      	adds	r3, #4
 8001e74:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	e020      	b.n	8001eca <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3303      	adds	r3, #3
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3302      	adds	r3, #2
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	440b      	add	r3, r1
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001ea0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	440b      	add	r3, r1
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001eae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	440a      	add	r2, r1
 8001eb6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001eb8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	4a06      	ldr	r2, [pc, #24]	@ (8001ee8 <FDCAN_CopyMessageToRAM+0xf4>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d3d6      	bcc.n	8001e88 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001eda:	bf00      	nop
 8001edc:	bf00      	nop
 8001ede:	3724      	adds	r7, #36	@ 0x24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	080052a0 	.word	0x080052a0

08001eec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001efa:	e142      	b.n	8002182 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8134 	beq.w	800217c <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x38>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	d125      	bne.n	8001f70 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	4013      	ands	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	6979      	ldr	r1, [r7, #20]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4013      	ands	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d00b      	beq.n	8001fc4 <HAL_GPIO_Init+0xd8>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d007      	beq.n	8001fc4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fb8:	2b11      	cmp	r3, #17
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b12      	cmp	r3, #18
 8001fc2:	d130      	bne.n	8002026 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4013      	ands	r3, r2
 8002008:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	f003 0201 	and.w	r2, r3, #1
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4313      	orrs	r3, r2
 800201e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
 800202e:	2b03      	cmp	r3, #3
 8002030:	d109      	bne.n	8002046 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800203a:	2b03      	cmp	r3, #3
 800203c:	d11b      	bne.n	8002076 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d017      	beq.n	8002076 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4013      	ands	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d07c      	beq.n	800217c <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002082:	4a47      	ldr	r2, [pc, #284]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3318      	adds	r3, #24
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4013      	ands	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0a9a      	lsrs	r2, r3, #10
 80020aa:	4b3e      	ldr	r3, [pc, #248]	@ (80021a4 <HAL_GPIO_Init+0x2b8>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	f002 0203 	and.w	r2, r2, #3
 80020b4:	00d2      	lsls	r2, r2, #3
 80020b6:	4093      	lsls	r3, r2
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80020be:	4938      	ldr	r1, [pc, #224]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3318      	adds	r3, #24
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80020cc:	4b34      	ldr	r3, [pc, #208]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80020f0:	4a2b      	ldr	r2, [pc, #172]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80020f6:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	43db      	mvns	r3, r3
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4013      	ands	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800211a:	4a21      	ldr	r2, [pc, #132]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002120:	4b1f      	ldr	r3, [pc, #124]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 8002122:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002126:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	43db      	mvns	r3, r3
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4013      	ands	r3, r2
 8002130:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002146:	4a16      	ldr	r2, [pc, #88]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800214e:	4b14      	ldr	r3, [pc, #80]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 8002150:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002154:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	43db      	mvns	r3, r3
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <HAL_GPIO_Init+0x2b4>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	3301      	adds	r3, #1
 8002180:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	f47f aeb5 	bne.w	8001efc <HAL_GPIO_Init+0x10>
  }
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	44022000 	.word	0x44022000
 80021a4:	002f7f7f 	.word	0x002f7f7f

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	041a      	lsls	r2, r3, #16
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43d9      	mvns	r1, r3
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	400b      	ands	r3, r1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_ICACHE_Enable+0x1c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <HAL_ICACHE_Enable+0x1c>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40030400 	.word	0x40030400

0800222c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f000 bc28 	b.w	8002a90 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002240:	4b94      	ldr	r3, [pc, #592]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f003 0318 	and.w	r3, r3, #24
 8002248:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800224a:	4b92      	ldr	r3, [pc, #584]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 800224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0310 	and.w	r3, r3, #16
 800225c:	2b00      	cmp	r3, #0
 800225e:	d05b      	beq.n	8002318 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	2b08      	cmp	r3, #8
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x46>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b18      	cmp	r3, #24
 800226a:	d114      	bne.n	8002296 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d111      	bne.n	8002296 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f000 bc08 	b.w	8002a90 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002280:	4b84      	ldr	r3, [pc, #528]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	041b      	lsls	r3, r3, #16
 800228e:	4981      	ldr	r1, [pc, #516]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002290:	4313      	orrs	r3, r2
 8002292:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002294:	e040      	b.n	8002318 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d023      	beq.n	80022e6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800229e:	4b7d      	ldr	r3, [pc, #500]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7fe fd4f 	bl	8000d4c <HAL_GetTick>
 80022ae:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022b2:	f7fe fd4b 	bl	8000d4c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e3e5      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022c4:	4b73      	ldr	r3, [pc, #460]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80022d0:	4b70      	ldr	r3, [pc, #448]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	496d      	ldr	r1, [pc, #436]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	618b      	str	r3, [r1, #24]
 80022e4:	e018      	b.n	8002318 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6a      	ldr	r2, [pc, #424]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80022ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fd2b 	bl	8000d4c <HAL_GetTick>
 80022f6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022fa:	f7fe fd27 	bl	8000d4c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e3c1      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800230c:	4b61      	ldr	r3, [pc, #388]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a0 	beq.w	8002466 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2b10      	cmp	r3, #16
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x10c>
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	2b18      	cmp	r3, #24
 8002330:	d109      	bne.n	8002346 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 8092 	bne.w	8002466 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e3a4      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x132>
 8002350:	4b50      	ldr	r3, [pc, #320]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e058      	b.n	8002410 <HAL_RCC_OscConfig+0x1e4>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d112      	bne.n	800238c <HAL_RCC_OscConfig+0x160>
 8002366:	4b4b      	ldr	r3, [pc, #300]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a4a      	ldr	r2, [pc, #296]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 800236c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b48      	ldr	r3, [pc, #288]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a47      	ldr	r2, [pc, #284]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002378:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b45      	ldr	r3, [pc, #276]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a44      	ldr	r2, [pc, #272]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e041      	b.n	8002410 <HAL_RCC_OscConfig+0x1e4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002394:	d112      	bne.n	80023bc <HAL_RCC_OscConfig+0x190>
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a3e      	ldr	r2, [pc, #248]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b39      	ldr	r3, [pc, #228]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a38      	ldr	r2, [pc, #224]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e029      	b.n	8002410 <HAL_RCC_OscConfig+0x1e4>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80023c4:	d112      	bne.n	80023ec <HAL_RCC_OscConfig+0x1c0>
 80023c6:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a32      	ldr	r2, [pc, #200]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b30      	ldr	r3, [pc, #192]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e011      	b.n	8002410 <HAL_RCC_OscConfig+0x1e4>
 80023ec:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a28      	ldr	r2, [pc, #160]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b26      	ldr	r3, [pc, #152]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a25      	ldr	r2, [pc, #148]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a22      	ldr	r2, [pc, #136]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 800240a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800240e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d013      	beq.n	8002440 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002418:	f7fe fc98 	bl	8000d4c <HAL_GetTick>
 800241c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002420:	f7fe fc94 	bl	8000d4c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	@ 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e32e      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002432:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x1f4>
 800243e:	e012      	b.n	8002466 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fc84 	bl	8000d4c <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002448:	f7fe fc80 	bl	8000d4c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	@ 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e31a      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800245a:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <HAL_RCC_OscConfig+0x268>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 809a 	beq.w	80025a8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x25a>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b18      	cmp	r3, #24
 800247e:	d149      	bne.n	8002514 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d146      	bne.n	8002514 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d104      	bne.n	8002498 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e2fe      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
 8002492:	bf00      	nop
 8002494:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800249e:	4b9a      	ldr	r3, [pc, #616]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0218 	and.w	r2, r3, #24
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d014      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80024ae:	4b96      	ldr	r3, [pc, #600]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0218 	bic.w	r2, r3, #24
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	4993      	ldr	r1, [pc, #588]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80024c0:	f000 fdd0 	bl	8003064 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024c4:	4b91      	ldr	r3, [pc, #580]	@ (800270c <HAL_RCC_OscConfig+0x4e0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fbb5 	bl	8000c38 <HAL_InitTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e2db      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fc38 	bl	8000d4c <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fc34 	bl	8000d4c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e2ce      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f2:	4b85      	ldr	r3, [pc, #532]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80024fe:	4b82      	ldr	r3, [pc, #520]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	041b      	lsls	r3, r3, #16
 800250c:	497e      	ldr	r1, [pc, #504]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002512:	e049      	b.n	80025a8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02c      	beq.n	8002576 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800251c:	4b7a      	ldr	r3, [pc, #488]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 0218 	bic.w	r2, r3, #24
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	4977      	ldr	r1, [pc, #476]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800252e:	4b76      	ldr	r3, [pc, #472]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fc07 	bl	8000d4c <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002542:	f7fe fc03 	bl	8000d4c <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e29d      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002554:	4b6c      	ldr	r3, [pc, #432]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002560:	4b69      	ldr	r3, [pc, #420]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	041b      	lsls	r3, r3, #16
 800256e:	4966      	ldr	r1, [pc, #408]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002570:	4313      	orrs	r3, r2
 8002572:	610b      	str	r3, [r1, #16]
 8002574:	e018      	b.n	80025a8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002576:	4b64      	ldr	r3, [pc, #400]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a63      	ldr	r2, [pc, #396]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7fe fbe3 	bl	8000d4c <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800258a:	f7fe fbdf 	bl	8000d4c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e279      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800259c:	4b5a      	ldr	r3, [pc, #360]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d03c      	beq.n	800262e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025bc:	4b52      	ldr	r3, [pc, #328]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80025be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025c2:	4a51      	ldr	r2, [pc, #324]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80025c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe fbbe 	bl	8000d4c <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025d4:	f7fe fbba 	bl	8000d4c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e254      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80025e6:	4b48      	ldr	r3, [pc, #288]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80025e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ef      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3a8>
 80025f4:	e01b      	b.n	800262e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f6:	4b44      	ldr	r3, [pc, #272]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80025f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025fc:	4a42      	ldr	r2, [pc, #264]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80025fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002602:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002606:	f7fe fba1 	bl	8000d4c <HAL_GetTick>
 800260a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800260e:	f7fe fb9d 	bl	8000d4c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e237      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002620:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ef      	bne.n	800260e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80d2 	beq.w	80027e0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800263c:	4b34      	ldr	r3, [pc, #208]	@ (8002710 <HAL_RCC_OscConfig+0x4e4>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d118      	bne.n	800267a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002648:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <HAL_RCC_OscConfig+0x4e4>)
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	4a30      	ldr	r2, [pc, #192]	@ (8002710 <HAL_RCC_OscConfig+0x4e4>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002654:	f7fe fb7a 	bl	8000d4c <HAL_GetTick>
 8002658:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7fe fb76 	bl	8000d4c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e210      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800266e:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <HAL_RCC_OscConfig+0x4e4>)
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d108      	bne.n	8002694 <HAL_RCC_OscConfig+0x468>
 8002682:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 8002684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002688:	4a1f      	ldr	r2, [pc, #124]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002692:	e074      	b.n	800277e <HAL_RCC_OscConfig+0x552>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d118      	bne.n	80026ce <HAL_RCC_OscConfig+0x4a2>
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 800269e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026a2:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026ac:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026b2:	4a15      	ldr	r2, [pc, #84]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026c2:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026cc:	e057      	b.n	800277e <HAL_RCC_OscConfig+0x552>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d11e      	bne.n	8002714 <HAL_RCC_OscConfig+0x4e8>
 80026d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ec:	4a06      	ldr	r2, [pc, #24]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026fc:	4a02      	ldr	r2, [pc, #8]	@ (8002708 <HAL_RCC_OscConfig+0x4dc>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002706:	e03a      	b.n	800277e <HAL_RCC_OscConfig+0x552>
 8002708:	44020c00 	.word	0x44020c00
 800270c:	2000001c 	.word	0x2000001c
 8002710:	44020800 	.word	0x44020800
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b85      	cmp	r3, #133	@ 0x85
 800271a:	d118      	bne.n	800274e <HAL_RCC_OscConfig+0x522>
 800271c:	4ba2      	ldr	r3, [pc, #648]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800271e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002722:	4aa1      	ldr	r2, [pc, #644]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800272c:	4b9e      	ldr	r3, [pc, #632]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800272e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002732:	4a9d      	ldr	r2, [pc, #628]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002738:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800273c:	4b9a      	ldr	r3, [pc, #616]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800273e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002742:	4a99      	ldr	r2, [pc, #612]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800274c:	e017      	b.n	800277e <HAL_RCC_OscConfig+0x552>
 800274e:	4b96      	ldr	r3, [pc, #600]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002754:	4a94      	ldr	r2, [pc, #592]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002756:	f023 0301 	bic.w	r3, r3, #1
 800275a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800275e:	4b92      	ldr	r3, [pc, #584]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002764:	4a90      	ldr	r2, [pc, #576]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002766:	f023 0304 	bic.w	r3, r3, #4
 800276a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800276e:	4b8e      	ldr	r3, [pc, #568]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002774:	4a8c      	ldr	r2, [pc, #560]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800277a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d016      	beq.n	80027b4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe fae1 	bl	8000d4c <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe fadd 	bl	8000d4c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e175      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a4:	4b80      	ldr	r3, [pc, #512]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80027a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ed      	beq.n	800278e <HAL_RCC_OscConfig+0x562>
 80027b2:	e015      	b.n	80027e0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe faca 	bl	8000d4c <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe fac6 	bl	8000d4c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e15e      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d2:	4b75      	ldr	r3, [pc, #468]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80027d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ed      	bne.n	80027bc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d036      	beq.n	800285a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027f4:	4b6c      	ldr	r3, [pc, #432]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6b      	ldr	r2, [pc, #428]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80027fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe faa4 	bl	8000d4c <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002808:	f7fe faa0 	bl	8000d4c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e13a      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800281a:	4b63      	ldr	r3, [pc, #396]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x5dc>
 8002826:	e018      	b.n	800285a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002828:	4b5f      	ldr	r3, [pc, #380]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a5e      	ldr	r2, [pc, #376]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800282e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7fe fa8a 	bl	8000d4c <HAL_GetTick>
 8002838:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800283c:	f7fe fa86 	bl	8000d4c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e120      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800284e:	4b56      	ldr	r3, [pc, #344]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 8115 	beq.w	8002a8e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	2b18      	cmp	r3, #24
 8002868:	f000 80af 	beq.w	80029ca <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	2b02      	cmp	r3, #2
 8002872:	f040 8086 	bne.w	8002982 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002876:	4b4c      	ldr	r3, [pc, #304]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4b      	ldr	r2, [pc, #300]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800287c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fa63 	bl	8000d4c <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800288a:	f7fe fa5f 	bl	8000d4c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0f9      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800289c:	4b42      	ldr	r3, [pc, #264]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80028a8:	4b3f      	ldr	r3, [pc, #252]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028b0:	f023 0303 	bic.w	r3, r3, #3
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028bc:	0212      	lsls	r2, r2, #8
 80028be:	430a      	orrs	r2, r1
 80028c0:	4939      	ldr	r1, [pc, #228]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	3b01      	subs	r3, #1
 80028d6:	025b      	lsls	r3, r3, #9
 80028d8:	b29b      	uxth	r3, r3
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	3b01      	subs	r3, #1
 80028f0:	061b      	lsls	r3, r3, #24
 80028f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028f6:	492c      	ldr	r1, [pc, #176]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80028fc:	4b2a      	ldr	r3, [pc, #168]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002902:	f023 0310 	bic.w	r3, r3, #16
 8002906:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290c:	4a26      	ldr	r2, [pc, #152]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002912:	4b25      	ldr	r3, [pc, #148]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	4a24      	ldr	r2, [pc, #144]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002918:	f043 0310 	orr.w	r3, r3, #16
 800291c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800291e:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002922:	f023 020c 	bic.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	491f      	ldr	r1, [pc, #124]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800292c:	4313      	orrs	r3, r2
 800292e:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002934:	f023 0220 	bic.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293c:	491a      	ldr	r1, [pc, #104]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002942:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002946:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800294c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800294e:	4b16      	ldr	r3, [pc, #88]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002954:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7fe f9f7 	bl	8000d4c <HAL_GetTick>
 800295e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002962:	f7fe f9f3 	bl	8000d4c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e08d      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x736>
 8002980:	e085      	b.n	8002a8e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002982:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a08      	ldr	r2, [pc, #32]	@ (80029a8 <HAL_RCC_OscConfig+0x77c>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe f9dd 	bl	8000d4c <HAL_GetTick>
 8002992:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002994:	e00a      	b.n	80029ac <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002996:	f7fe f9d9 	bl	8000d4c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d903      	bls.n	80029ac <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e073      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
 80029a8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1ee      	bne.n	8002996 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80029b8:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	4a36      	ldr	r2, [pc, #216]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 80029be:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	6293      	str	r3, [r2, #40]	@ 0x28
 80029c8:	e061      	b.n	8002a8e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80029ca:	4b33      	ldr	r3, [pc, #204]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 80029cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ce:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029d0:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 80029d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d031      	beq.n	8002a42 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d12a      	bne.n	8002a42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d122      	bne.n	8002a42 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a06:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d11a      	bne.n	8002a42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	0a5b      	lsrs	r3, r3, #9
 8002a10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a18:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d111      	bne.n	8002a42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d108      	bne.n	8002a42 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	0e1b      	lsrs	r3, r3, #24
 8002a34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d001      	beq.n	8002a46 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e024      	b.n	8002a90 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 8002a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d01a      	beq.n	8002a8e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a58:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 8002a5e:	f023 0310 	bic.w	r3, r3, #16
 8002a62:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7fe f972 	bl	8000d4c <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002a6a:	bf00      	nop
 8002a6c:	f7fe f96e 	bl	8000d4c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d0f9      	beq.n	8002a6c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7c:	4a06      	ldr	r2, [pc, #24]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a82:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	4a04      	ldr	r2, [pc, #16]	@ (8002a98 <HAL_RCC_OscConfig+0x86c>)
 8002a88:	f043 0310 	orr.w	r3, r3, #16
 8002a8c:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	44020c00 	.word	0x44020c00

08002a9c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e19e      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b83      	ldr	r3, [pc, #524]	@ (8002cc0 <HAL_RCC_ClockConfig+0x224>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d910      	bls.n	8002ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b80      	ldr	r3, [pc, #512]	@ (8002cc0 <HAL_RCC_ClockConfig+0x224>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 020f 	bic.w	r2, r3, #15
 8002ac6:	497e      	ldr	r1, [pc, #504]	@ (8002cc0 <HAL_RCC_ClockConfig+0x224>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b7c      	ldr	r3, [pc, #496]	@ (8002cc0 <HAL_RCC_ClockConfig+0x224>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e186      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695a      	ldr	r2, [r3, #20]
 8002af0:	4b74      	ldr	r3, [pc, #464]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d909      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002afe:	4b71      	ldr	r3, [pc, #452]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	021b      	lsls	r3, r3, #8
 8002b0c:	496d      	ldr	r1, [pc, #436]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	4b68      	ldr	r3, [pc, #416]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d909      	bls.n	8002b44 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b30:	4b64      	ldr	r3, [pc, #400]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4961      	ldr	r1, [pc, #388]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	4b5b      	ldr	r3, [pc, #364]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d908      	bls.n	8002b72 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b60:	4b58      	ldr	r3, [pc, #352]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4955      	ldr	r1, [pc, #340]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	4b50      	ldr	r3, [pc, #320]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d908      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 020f 	bic.w	r2, r3, #15
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	494a      	ldr	r1, [pc, #296]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8093 	beq.w	8002cd4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002bb6:	4b43      	ldr	r3, [pc, #268]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d121      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e113      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bce:	4b3d      	ldr	r3, [pc, #244]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d115      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e107      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002be6:	4b37      	ldr	r3, [pc, #220]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d109      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0fb      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf6:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0f3      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002c06:	4b2f      	ldr	r3, [pc, #188]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f023 0203 	bic.w	r2, r3, #3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	492c      	ldr	r1, [pc, #176]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c18:	f7fe f898 	bl	8000d4c <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe f890 	bl	8000d4c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0d7      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c3e:	4b21      	ldr	r3, [pc, #132]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0318 	and.w	r3, r3, #24
 8002c46:	2b18      	cmp	r3, #24
 8002c48:	d1ee      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x18c>
 8002c4a:	e043      	b.n	8002cd4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d112      	bne.n	8002c7a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c56:	f7fe f879 	bl	8000d4c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0c0      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c6c:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 0318 	and.w	r3, r3, #24
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d1ee      	bne.n	8002c56 <HAL_RCC_ClockConfig+0x1ba>
 8002c78:	e02c      	b.n	8002cd4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d122      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c82:	e00a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fe f862 	bl	8000d4c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e0a9      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_RCC_ClockConfig+0x228>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 0318 	and.w	r3, r3, #24
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d1ee      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x1e8>
 8002ca6:	e015      	b.n	8002cd4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7fe f850 	bl	8000d4c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d906      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e097      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
 8002cbe:	bf00      	nop
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	f003 0318 	and.w	r3, r3, #24
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e9      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	4b44      	ldr	r3, [pc, #272]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d208      	bcs.n	8002d02 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002cf0:	4b41      	ldr	r3, [pc, #260]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f023 020f 	bic.w	r2, r3, #15
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	493e      	ldr	r1, [pc, #248]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d02:	4b3e      	ldr	r3, [pc, #248]	@ (8002dfc <HAL_RCC_ClockConfig+0x360>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d210      	bcs.n	8002d32 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d10:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_RCC_ClockConfig+0x360>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f023 020f 	bic.w	r2, r3, #15
 8002d18:	4938      	ldr	r1, [pc, #224]	@ (8002dfc <HAL_RCC_ClockConfig+0x360>)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d20:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_RCC_ClockConfig+0x360>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e05d      	b.n	8002dee <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	4b2d      	ldr	r3, [pc, #180]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d208      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4927      	ldr	r1, [pc, #156]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d012      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	091b      	lsrs	r3, r3, #4
 8002d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d209      	bcs.n	8002d92 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	491a      	ldr	r1, [pc, #104]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	4b15      	ldr	r3, [pc, #84]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d209      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002db0:	4b11      	ldr	r3, [pc, #68]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	490e      	ldr	r1, [pc, #56]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002dc4:	f000 f822 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCC_ClockConfig+0x35c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	490b      	ldr	r1, [pc, #44]	@ (8002e00 <HAL_RCC_ClockConfig+0x364>)
 8002dd4:	5ccb      	ldrb	r3, [r1, r3]
 8002dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <HAL_RCC_ClockConfig+0x368>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <HAL_RCC_ClockConfig+0x36c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd ff28 	bl	8000c38 <HAL_InitTick>
 8002de8:	4603      	mov	r3, r0
 8002dea:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002dec:	7afb      	ldrb	r3, [r7, #11]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	44020c00 	.word	0x44020c00
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	08005290 	.word	0x08005290
 8002e04:	20000018 	.word	0x20000018
 8002e08:	2000001c 	.word	0x2000001c

08002e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	@ 0x24
 8002e10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e12:	4b8c      	ldr	r3, [pc, #560]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f003 0318 	and.w	r3, r3, #24
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d102      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e1e:	4b8a      	ldr	r3, [pc, #552]	@ (8003048 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002e20:	61fb      	str	r3, [r7, #28]
 8002e22:	e107      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e24:	4b87      	ldr	r3, [pc, #540]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f003 0318 	and.w	r3, r3, #24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d112      	bne.n	8002e56 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e30:	4b84      	ldr	r3, [pc, #528]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e3c:	4b81      	ldr	r3, [pc, #516]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	4a81      	ldr	r2, [pc, #516]	@ (800304c <HAL_RCC_GetSysClockFreq+0x240>)
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	61fb      	str	r3, [r7, #28]
 8002e4e:	e0f1      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002e50:	4b7e      	ldr	r3, [pc, #504]	@ (800304c <HAL_RCC_GetSysClockFreq+0x240>)
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	e0ee      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e56:	4b7b      	ldr	r3, [pc, #492]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0318 	and.w	r3, r3, #24
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d102      	bne.n	8002e68 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e62:	4b7b      	ldr	r3, [pc, #492]	@ (8003050 <HAL_RCC_GetSysClockFreq+0x244>)
 8002e64:	61fb      	str	r3, [r7, #28]
 8002e66:	e0e5      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e68:	4b76      	ldr	r3, [pc, #472]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	f003 0318 	and.w	r3, r3, #24
 8002e70:	2b18      	cmp	r3, #24
 8002e72:	f040 80dd 	bne.w	8003030 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002e76:	4b73      	ldr	r3, [pc, #460]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002e80:	4b70      	ldr	r3, [pc, #448]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002e8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e98:	4b6a      	ldr	r3, [pc, #424]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002e9c:	08db      	lsrs	r3, r3, #3
 8002e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	ee07 3a90 	vmov	s15, r3
 8002eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 80b7 	beq.w	800302a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0xbe>
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d056      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x16a>
 8002ec8:	e077      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002eca:	4b5e      	ldr	r3, [pc, #376]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02d      	beq.n	8002f32 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	08db      	lsrs	r3, r3, #3
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800304c <HAL_RCC_GetSysClockFreq+0x240>)
 8002ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f00:	4b50      	ldr	r3, [pc, #320]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f10:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f14:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x248>
 8002f18:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f24:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002f30:	e065      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	ee07 3a90 	vmov	s15, r3
 8002f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3c:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003058 <HAL_RCC_GetSysClockFreq+0x24c>
 8002f40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f44:	4b3f      	ldr	r3, [pc, #252]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f54:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f58:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x248>
 8002f5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f68:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f70:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002f74:	e043      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	ee07 3a90 	vmov	s15, r3
 8002f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f80:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800305c <HAL_RCC_GetSysClockFreq+0x250>
 8002f84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f88:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f98:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9c:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x248>
 8002fa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fac:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002fb8:	e021      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003060 <HAL_RCC_GetSysClockFreq+0x254>
 8002fc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fe0:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003054 <HAL_RCC_GetSysClockFreq+0x248>
 8002fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002ffc:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002ffe:	4b11      	ldr	r3, [pc, #68]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x238>)
 8003000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003002:	0a5b      	lsrs	r3, r3, #9
 8003004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003008:	3301      	adds	r3, #1
 800300a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003016:	edd7 6a06 	vldr	s13, [r7, #24]
 800301a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003022:	ee17 3a90 	vmov	r3, s15
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	e004      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	e001      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003030:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_RCC_GetSysClockFreq+0x240>)
 8003032:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003034:	69fb      	ldr	r3, [r7, #28]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3724      	adds	r7, #36	@ 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	44020c00 	.word	0x44020c00
 8003048:	003d0900 	.word	0x003d0900
 800304c:	03d09000 	.word	0x03d09000
 8003050:	007a1200 	.word	0x007a1200
 8003054:	46000000 	.word	0x46000000
 8003058:	4c742400 	.word	0x4c742400
 800305c:	4af42400 	.word	0x4af42400
 8003060:	4a742400 	.word	0x4a742400

08003064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003068:	f7ff fed0 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 800306c:	4602      	mov	r2, r0
 800306e:	4b08      	ldr	r3, [pc, #32]	@ (8003090 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003072:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003076:	4907      	ldr	r1, [pc, #28]	@ (8003094 <HAL_RCC_GetHCLKFreq+0x30>)
 8003078:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800307a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a05      	ldr	r2, [pc, #20]	@ (8003098 <HAL_RCC_GetHCLKFreq+0x34>)
 8003084:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003086:	4b04      	ldr	r3, [pc, #16]	@ (8003098 <HAL_RCC_GetHCLKFreq+0x34>)
 8003088:	681b      	ldr	r3, [r3, #0]
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	44020c00 	.word	0x44020c00
 8003094:	08005290 	.word	0x08005290
 8003098:	20000018 	.word	0x20000018

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800309c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a0:	b0d8      	sub	sp, #352	@ 0x160
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030ae:	2300      	movs	r3, #0
 80030b0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80030b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80030c0:	2500      	movs	r5, #0
 80030c2:	ea54 0305 	orrs.w	r3, r4, r5
 80030c6:	d00b      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80030c8:	4bcd      	ldr	r3, [pc, #820]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030ce:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80030d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	4ac9      	ldr	r2, [pc, #804]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030da:	430b      	orrs	r3, r1
 80030dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f002 0801 	and.w	r8, r2, #1
 80030ec:	f04f 0900 	mov.w	r9, #0
 80030f0:	ea58 0309 	orrs.w	r3, r8, r9
 80030f4:	d042      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80030f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80030fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fc:	2b05      	cmp	r3, #5
 80030fe:	d823      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003100:	a201      	add	r2, pc, #4	@ (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003151 	.word	0x08003151
 800310c:	08003121 	.word	0x08003121
 8003110:	08003135 	.word	0x08003135
 8003114:	08003151 	.word	0x08003151
 8003118:	08003151 	.word	0x08003151
 800311c:	08003151 	.word	0x08003151
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003124:	3308      	adds	r3, #8
 8003126:	4618      	mov	r0, r3
 8003128:	f001 ff42 	bl	8004fb0 <RCCEx_PLL2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003132:	e00e      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003134:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003138:	3330      	adds	r3, #48	@ 0x30
 800313a:	4618      	mov	r0, r3
 800313c:	f001 ffd0 	bl	80050e0 <RCCEx_PLL3_Config>
 8003140:	4603      	mov	r3, r0
 8003142:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003146:	e004      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003152:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10c      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800315a:	4ba9      	ldr	r3, [pc, #676]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800315c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003160:	f023 0107 	bic.w	r1, r3, #7
 8003164:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	4aa5      	ldr	r2, [pc, #660]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800316c:	430b      	orrs	r3, r1
 800316e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003172:	e003      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003178:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800317c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 0a02 	and.w	sl, r2, #2
 8003188:	f04f 0b00 	mov.w	fp, #0
 800318c:	ea5a 030b 	orrs.w	r3, sl, fp
 8003190:	f000 8088 	beq.w	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003194:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319a:	2b28      	cmp	r3, #40	@ 0x28
 800319c:	d868      	bhi.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800319e:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	08003279 	.word	0x08003279
 80031a8:	08003271 	.word	0x08003271
 80031ac:	08003271 	.word	0x08003271
 80031b0:	08003271 	.word	0x08003271
 80031b4:	08003271 	.word	0x08003271
 80031b8:	08003271 	.word	0x08003271
 80031bc:	08003271 	.word	0x08003271
 80031c0:	08003271 	.word	0x08003271
 80031c4:	08003249 	.word	0x08003249
 80031c8:	08003271 	.word	0x08003271
 80031cc:	08003271 	.word	0x08003271
 80031d0:	08003271 	.word	0x08003271
 80031d4:	08003271 	.word	0x08003271
 80031d8:	08003271 	.word	0x08003271
 80031dc:	08003271 	.word	0x08003271
 80031e0:	08003271 	.word	0x08003271
 80031e4:	0800325d 	.word	0x0800325d
 80031e8:	08003271 	.word	0x08003271
 80031ec:	08003271 	.word	0x08003271
 80031f0:	08003271 	.word	0x08003271
 80031f4:	08003271 	.word	0x08003271
 80031f8:	08003271 	.word	0x08003271
 80031fc:	08003271 	.word	0x08003271
 8003200:	08003271 	.word	0x08003271
 8003204:	08003279 	.word	0x08003279
 8003208:	08003271 	.word	0x08003271
 800320c:	08003271 	.word	0x08003271
 8003210:	08003271 	.word	0x08003271
 8003214:	08003271 	.word	0x08003271
 8003218:	08003271 	.word	0x08003271
 800321c:	08003271 	.word	0x08003271
 8003220:	08003271 	.word	0x08003271
 8003224:	08003279 	.word	0x08003279
 8003228:	08003271 	.word	0x08003271
 800322c:	08003271 	.word	0x08003271
 8003230:	08003271 	.word	0x08003271
 8003234:	08003271 	.word	0x08003271
 8003238:	08003271 	.word	0x08003271
 800323c:	08003271 	.word	0x08003271
 8003240:	08003271 	.word	0x08003271
 8003244:	08003279 	.word	0x08003279
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003248:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800324c:	3308      	adds	r3, #8
 800324e:	4618      	mov	r0, r3
 8003250:	f001 feae 	bl	8004fb0 <RCCEx_PLL2_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800325a:	e00e      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800325c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003260:	3330      	adds	r3, #48	@ 0x30
 8003262:	4618      	mov	r0, r3
 8003264:	f001 ff3c 	bl	80050e0 <RCCEx_PLL3_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800326e:	e004      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003282:	4b5f      	ldr	r3, [pc, #380]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003284:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003288:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800328c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	4a5b      	ldr	r2, [pc, #364]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003294:	430b      	orrs	r3, r1
 8003296:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800329a:	e003      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80032a0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f002 0304 	and.w	r3, r2, #4
 80032b0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80032ba:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	d04e      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80032c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80032ce:	d02c      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80032d0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80032d4:	d825      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032da:	d028      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80032dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e0:	d81f      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032e4:	d025      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80032e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80032e8:	d81b      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032ea:	2b80      	cmp	r3, #128	@ 0x80
 80032ec:	d00f      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x272>
 80032ee:	2b80      	cmp	r3, #128	@ 0x80
 80032f0:	d817      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d01f      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80032f6:	2b40      	cmp	r3, #64	@ 0x40
 80032f8:	d113      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80032fe:	3308      	adds	r3, #8
 8003300:	4618      	mov	r0, r3
 8003302:	f001 fe55 	bl	8004fb0 <RCCEx_PLL2_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800330c:	e014      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800330e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003312:	3330      	adds	r3, #48	@ 0x30
 8003314:	4618      	mov	r0, r3
 8003316:	f001 fee3 	bl	80050e0 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003320:	e00a      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800332a:	bf00      	nop
 800332c:	e004      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003338:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003340:	4b2f      	ldr	r3, [pc, #188]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003346:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800334a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800334e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003350:	4a2b      	ldr	r2, [pc, #172]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003352:	430b      	orrs	r3, r1
 8003354:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800335a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800335e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003362:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f002 0308 	and.w	r3, r2, #8
 800336e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003372:	2300      	movs	r3, #0
 8003374:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003378:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800337c:	460b      	mov	r3, r1
 800337e:	4313      	orrs	r3, r2
 8003380:	d056      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003382:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003386:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003388:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800338c:	d031      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800338e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003392:	d82a      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003398:	d02d      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800339a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800339e:	d824      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033a4:	d029      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80033a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033aa:	d81e      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b0:	d011      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033b6:	d818      	bhi.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d023      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80033bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c0:	d113      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033c6:	3308      	adds	r3, #8
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fdf1 	bl	8004fb0 <RCCEx_PLL2_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80033d4:	e017      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80033da:	3330      	adds	r3, #48	@ 0x30
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fe7f 	bl	80050e0 <RCCEx_PLL3_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80033e8:	e00d      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80033f0:	e009      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80033f2:	bf00      	nop
 80033f4:	e007      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80033f6:	bf00      	nop
 80033f8:	e005      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80033fa:	bf00      	nop
 80033fc:	e003      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80033fe:	bf00      	nop
 8003400:	44020c00 	.word	0x44020c00
        break;
 8003404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003406:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10c      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800340e:	4bbb      	ldr	r3, [pc, #748]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003410:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003414:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800341c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800341e:	4ab7      	ldr	r2, [pc, #732]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003420:	430b      	orrs	r3, r1
 8003422:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800342c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003430:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f002 0310 	and.w	r3, r2, #16
 800343c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003446:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800344a:	460b      	mov	r3, r1
 800344c:	4313      	orrs	r3, r2
 800344e:	d053      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003456:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800345a:	d031      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800345c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003460:	d82a      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003462:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003466:	d02d      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800346c:	d824      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800346e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003472:	d029      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003474:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003478:	d81e      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800347e:	d011      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003484:	d818      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x430>
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800348e:	d113      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003494:	3308      	adds	r3, #8
 8003496:	4618      	mov	r0, r3
 8003498:	f001 fd8a 	bl	8004fb0 <RCCEx_PLL2_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80034a2:	e014      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034a8:	3330      	adds	r3, #48	@ 0x30
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fe18 	bl	80050e0 <RCCEx_PLL3_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80034b6:	e00a      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80034be:	e006      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034c0:	bf00      	nop
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034c4:	bf00      	nop
 80034c6:	e002      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034c8:	bf00      	nop
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80034cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80034d6:	4b89      	ldr	r3, [pc, #548]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80034e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e6:	4a85      	ldr	r2, [pc, #532]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034e8:	430b      	orrs	r3, r1
 80034ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034ee:	e003      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80034f4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f002 0320 	and.w	r3, r2, #32
 8003504:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800350e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8003512:	460b      	mov	r3, r1
 8003514:	4313      	orrs	r3, r2
 8003516:	d053      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003522:	d031      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003524:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003528:	d82a      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800352a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800352e:	d02d      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003534:	d824      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003536:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800353a:	d029      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800353c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003540:	d81e      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003546:	d011      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354c:	d818      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003556:	d113      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800355c:	3308      	adds	r3, #8
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fd26 	bl	8004fb0 <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800356a:	e014      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800356c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003570:	3330      	adds	r3, #48	@ 0x30
 8003572:	4618      	mov	r0, r3
 8003574:	f001 fdb4 	bl	80050e0 <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800357e:	e00a      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003586:	e006      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003588:	bf00      	nop
 800358a:	e004      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800358c:	bf00      	nop
 800358e:	e002      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003590:	bf00      	nop
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003596:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800359e:	4b57      	ldr	r3, [pc, #348]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035a4:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80035a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ae:	4a53      	ldr	r2, [pc, #332]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035b6:	e003      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80035bc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80035cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80035d6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d053      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80035e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80035e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035ea:	d031      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80035ec:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80035f0:	d82a      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80035f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f6:	d02d      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80035f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035fc:	d824      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80035fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003602:	d029      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003604:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003608:	d81e      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800360a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800360e:	d011      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003610:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003614:	d818      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d020      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800361a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800361e:	d113      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003620:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003624:	3308      	adds	r3, #8
 8003626:	4618      	mov	r0, r3
 8003628:	f001 fcc2 	bl	8004fb0 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003632:	e014      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003638:	3330      	adds	r3, #48	@ 0x30
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fd50 	bl	80050e0 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003646:	e00a      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800364e:	e006      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003650:	bf00      	nop
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003654:	bf00      	nop
 8003656:	e002      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003666:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003668:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800366c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8003670:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003676:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003678:	430b      	orrs	r3, r1
 800367a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800367e:	e003      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003684:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800368c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003690:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003694:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003698:	2300      	movs	r3, #0
 800369a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800369e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80036a2:	460b      	mov	r3, r1
 80036a4:	4313      	orrs	r3, r2
 80036a6:	d055      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80036a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ae:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80036b2:	d033      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x680>
 80036b4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80036b8:	d82c      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036be:	d02f      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80036c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c4:	d826      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036ca:	d02b      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80036cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036d0:	d820      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d6:	d013      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80036d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036dc:	d81a      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d022      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80036e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036e6:	d115      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80036ec:	3308      	adds	r3, #8
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fc5e 	bl	8004fb0 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80036fa:	e016      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80036fc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003700:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003704:	3330      	adds	r3, #48	@ 0x30
 8003706:	4618      	mov	r0, r3
 8003708:	f001 fcea 	bl	80050e0 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003712:	e00a      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800371a:	e006      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800371c:	bf00      	nop
 800371e:	e004      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003720:	bf00      	nop
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10c      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003732:	4bbb      	ldr	r3, [pc, #748]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003738:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800373c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003742:	4ab7      	ldr	r2, [pc, #732]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003744:	430b      	orrs	r3, r1
 8003746:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800374a:	e003      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003750:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003754:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003760:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800376a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800376e:	460b      	mov	r3, r1
 8003770:	4313      	orrs	r3, r2
 8003772:	d053      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003774:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800377a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800377e:	d031      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003780:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003784:	d82a      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003786:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800378a:	d02d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800378c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003790:	d824      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003792:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003796:	d029      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003798:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800379c:	d81e      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800379e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a2:	d011      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80037a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037a8:	d818      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x740>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d020      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80037ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037b2:	d113      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037b8:	3308      	adds	r3, #8
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fbf8 	bl	8004fb0 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80037c6:	e014      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80037cc:	3330      	adds	r3, #48	@ 0x30
 80037ce:	4618      	mov	r0, r3
 80037d0:	f001 fc86 	bl	80050e0 <RCCEx_PLL3_Config>
 80037d4:	4603      	mov	r3, r0
 80037d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80037da:	e00a      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80037e2:	e006      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037e4:	bf00      	nop
 80037e6:	e004      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037e8:	bf00      	nop
 80037ea:	e002      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037ec:	bf00      	nop
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80037f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10c      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80037fa:	4b89      	ldr	r3, [pc, #548]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003800:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003808:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800380a:	4a85      	ldr	r2, [pc, #532]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800380c:	430b      	orrs	r3, r1
 800380e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003812:	e003      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003818:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800381c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003828:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800382c:	2300      	movs	r3, #0
 800382e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003832:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003836:	460b      	mov	r3, r1
 8003838:	4313      	orrs	r3, r2
 800383a:	d055      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800383c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003844:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003848:	d031      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x812>
 800384a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800384e:	d82a      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003854:	d02d      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385a:	d824      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800385c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003860:	d029      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003862:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003866:	d81e      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800386c:	d011      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800386e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003872:	d818      	bhi.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003878:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800387c:	d113      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800387e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003882:	3308      	adds	r3, #8
 8003884:	4618      	mov	r0, r3
 8003886:	f001 fb93 	bl	8004fb0 <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003890:	e014      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003896:	3330      	adds	r3, #48	@ 0x30
 8003898:	4618      	mov	r0, r3
 800389a:	f001 fc21 	bl	80050e0 <RCCEx_PLL3_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80038a4:	e00a      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038ae:	bf00      	nop
 80038b0:	e004      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80038ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80038c4:	4b56      	ldr	r3, [pc, #344]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038ca:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80038ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d6:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038de:	e003      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80038e4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80038e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80038ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80038f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80038fe:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003902:	460b      	mov	r3, r1
 8003904:	4313      	orrs	r3, r2
 8003906:	d044      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003908:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800390c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003910:	2b05      	cmp	r3, #5
 8003912:	d823      	bhi.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003914:	a201      	add	r2, pc, #4	@ (adr r2, 800391c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003965 	.word	0x08003965
 8003920:	08003935 	.word	0x08003935
 8003924:	08003949 	.word	0x08003949
 8003928:	08003965 	.word	0x08003965
 800392c:	08003965 	.word	0x08003965
 8003930:	08003965 	.word	0x08003965
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003934:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003938:	3308      	adds	r3, #8
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fb38 	bl	8004fb0 <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003946:	e00e      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800394c:	3330      	adds	r3, #48	@ 0x30
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fbc6 	bl	80050e0 <RCCEx_PLL3_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800395a:	e004      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003962:	e000      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003966:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800396e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003970:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003974:	f023 0107 	bic.w	r1, r3, #7
 8003978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003980:	4a27      	ldr	r2, [pc, #156]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003982:	430b      	orrs	r3, r1
 8003984:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003988:	e003      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800398e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800399e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039a2:	2300      	movs	r3, #0
 80039a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039a8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039ac:	460b      	mov	r3, r1
 80039ae:	4313      	orrs	r3, r2
 80039b0:	d04f      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80039b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ba:	2b50      	cmp	r3, #80	@ 0x50
 80039bc:	d029      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80039be:	2b50      	cmp	r3, #80	@ 0x50
 80039c0:	d823      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039c2:	2b40      	cmp	r3, #64	@ 0x40
 80039c4:	d027      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d81f      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039ca:	2b30      	cmp	r3, #48	@ 0x30
 80039cc:	d025      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80039ce:	2b30      	cmp	r3, #48	@ 0x30
 80039d0:	d81b      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d00f      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d817      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d022      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d113      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039e6:	3308      	adds	r3, #8
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 fae1 	bl	8004fb0 <RCCEx_PLL2_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80039f4:	e017      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80039fa:	3330      	adds	r3, #48	@ 0x30
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fb6f 	bl	80050e0 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003a08:	e00d      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003a10:	e009      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a12:	bf00      	nop
 8003a14:	e007      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a16:	bf00      	nop
 8003a18:	e005      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003a1e:	bf00      	nop
 8003a20:	44020c00 	.word	0x44020c00
        break;
 8003a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10d      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003a2e:	4baf      	ldr	r3, [pc, #700]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003a34:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a40:	4aaa      	ldr	r2, [pc, #680]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a42:	430b      	orrs	r3, r1
 8003a44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003a48:	e003      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003a4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	d055      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a7a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a7e:	d031      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003a80:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003a84:	d82a      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a86:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a8a:	d02d      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a90:	d824      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a92:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a96:	d029      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003a98:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a9c:	d81e      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aa2:	d011      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003aa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aa8:	d818      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d020      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003aae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ab2:	d113      	bne.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ab8:	3308      	adds	r3, #8
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fa78 	bl	8004fb0 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003ac6:	e014      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003acc:	3330      	adds	r3, #48	@ 0x30
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 fb06 	bl	80050e0 <RCCEx_PLL3_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003ada:	e00a      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003ae2:	e006      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ae4:	bf00      	nop
 8003ae6:	e004      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003ae8:	bf00      	nop
 8003aea:	e002      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003aec:	bf00      	nop
 8003aee:	e000      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10d      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003afa:	4b7c      	ldr	r3, [pc, #496]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b00:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b0c:	4a77      	ldr	r2, [pc, #476]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b1a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d03d      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b4a:	d01b      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003b4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b50:	d814      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003b52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b56:	d017      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b5c:	d80e      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d014      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b66:	d109      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003b6c:	3330      	adds	r3, #48	@ 0x30
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fab6 	bl	80050e0 <RCCEx_PLL3_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003b7a:	e008      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003b82:	e004      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b84:	bf00      	nop
 8003b86:	e002      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b88:	bf00      	nop
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10d      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003b96:	4b55      	ldr	r3, [pc, #340]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003b9c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba8:	4a50      	ldr	r2, [pc, #320]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003bb0:	e003      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003bb6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	d03d      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003be2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003be6:	d01b      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003be8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bec:	d814      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003bee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bf2:	d017      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003bf4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bf8:	d80e      	bhi.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d014      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003bfe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c02:	d109      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c08:	3330      	adds	r3, #48	@ 0x30
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f001 fa68 	bl	80050e0 <RCCEx_PLL3_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003c16:	e008      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003c1e:	e004      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003c32:	4b2e      	ldr	r3, [pc, #184]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c38:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c44:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003c52:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c66:	2300      	movs	r3, #0
 8003c68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c6c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d040      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c82:	d01b      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c88:	d814      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003c8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c8e:	d017      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c94:	d80e      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d014      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003c9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c9e:	d109      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ca4:	3330      	adds	r3, #48	@ 0x30
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 fa1a 	bl	80050e0 <RCCEx_PLL3_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003cba:	e004      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003cbc:	bf00      	nop
 8003cbe:	e002      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003cc0:	bf00      	nop
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d110      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003cce:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003cd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cd4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ce0:	4a02      	ldr	r2, [pc, #8]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003ce8:	e006      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003cea:	bf00      	nop
 8003cec:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003cf4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	2100      	movs	r1, #0
 8003d02:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003d06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d03d      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d24:	d01b      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003d26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003d2a:	d814      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003d2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d30:	d017      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003d32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d36:	d80e      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d014      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d40:	d109      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d46:	3330      	adds	r3, #48	@ 0x30
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 f9c9 	bl	80050e0 <RCCEx_PLL3_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003d54:	e008      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003d5c:	e004      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003d70:	4bbe      	ldr	r3, [pc, #760]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d76:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d82:	4aba      	ldr	r2, [pc, #744]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d8a:	e003      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003d90:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003da0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003daa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d035      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003dbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dc0:	d015      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003dc6:	d80e      	bhi.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d012      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd0:	d109      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003dd6:	3330      	adds	r3, #48	@ 0x30
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f981 	bl	80050e0 <RCCEx_PLL3_Config>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003de4:	e006      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003dec:	e002      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003dfc:	4b9b      	ldr	r3, [pc, #620]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003dfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e02:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e0e:	4a97      	ldr	r2, [pc, #604]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e10:	430b      	orrs	r3, r1
 8003e12:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e16:	e003      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003e1c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8003e2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e32:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e36:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003e40:	4b8a      	ldr	r3, [pc, #552]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4a89      	ldr	r2, [pc, #548]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e4a:	61d3      	str	r3, [r2, #28]
 8003e4c:	4b87      	ldr	r3, [pc, #540]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e4e:	69d9      	ldr	r1, [r3, #28]
 8003e50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e54:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003e58:	4a84      	ldr	r2, [pc, #528]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e74:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	d055      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003e7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003e82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003e86:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003e8a:	d031      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003e8c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003e90:	d82a      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003e92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e96:	d02d      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e9c:	d824      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea2:	d029      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003ea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ea8:	d81e      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eae:	d011      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003eb4:	d818      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ebe:	d113      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 f872 	bl	8004fb0 <RCCEx_PLL2_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003ed2:	e014      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ed8:	3330      	adds	r3, #48	@ 0x30
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f900 	bl	80050e0 <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003eee:	e006      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ef0:	bf00      	nop
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003f06:	4b59      	ldr	r3, [pc, #356]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003f0c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f18:	4a54      	ldr	r2, [pc, #336]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003f26:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f40:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4313      	orrs	r3, r2
 8003f48:	d055      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f52:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f56:	d031      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003f58:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003f5c:	d82a      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f62:	d02d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003f64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f68:	d824      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f6e:	d029      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003f70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f74:	d81e      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f7a:	d011      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f80:	d818      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d020      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f8a:	d113      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003f90:	3308      	adds	r3, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 f80c 	bl	8004fb0 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003f9e:	e014      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fa4:	3330      	adds	r3, #48	@ 0x30
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 f89a 	bl	80050e0 <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003fb2:	e00a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8003fba:	e006      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003fd2:	4b26      	ldr	r3, [pc, #152]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003fd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003fe0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003fe4:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003fec:	e003      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8003ff2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003ff6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	2100      	movs	r1, #0
 8004000:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800400c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004010:	460b      	mov	r3, r1
 8004012:	4313      	orrs	r3, r2
 8004014:	d057      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004016:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800401a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800401e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004022:	d033      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004028:	d82c      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800402a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800402e:	d02f      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004030:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004034:	d826      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004036:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800403a:	d02b      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800403c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004040:	d820      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004042:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004046:	d013      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004048:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800404c:	d81a      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d022      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004056:	d115      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800405c:	3308      	adds	r3, #8
 800405e:	4618      	mov	r0, r3
 8004060:	f000 ffa6 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800406a:	e016      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800406c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004070:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004074:	3330      	adds	r3, #48	@ 0x30
 8004076:	4618      	mov	r0, r3
 8004078:	f001 f832 	bl	80050e0 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004082:	e00a      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800408a:	e006      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800408c:	bf00      	nop
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80040a2:	4bbb      	ldr	r3, [pc, #748]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80040a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80040ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040b4:	4ab6      	ldr	r2, [pc, #728]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80040c2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80040c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	2100      	movs	r1, #0
 80040d0:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4313      	orrs	r3, r2
 80040e4:	d055      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80040e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80040ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80040ee:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80040f2:	d031      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80040f4:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80040f8:	d82a      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80040fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040fe:	d02d      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004104:	d824      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004106:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800410a:	d029      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800410c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004110:	d81e      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004112:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004116:	d011      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004118:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800411c:	d818      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d020      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004126:	d113      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004128:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800412c:	3308      	adds	r3, #8
 800412e:	4618      	mov	r0, r3
 8004130:	f000 ff3e 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800413a:	e014      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800413c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004140:	3330      	adds	r3, #48	@ 0x30
 8004142:	4618      	mov	r0, r3
 8004144:	f000 ffcc 	bl	80050e0 <RCCEx_PLL3_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800414e:	e00a      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004156:	e006      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004158:	bf00      	nop
 800415a:	e004      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800415c:	bf00      	nop
 800415e:	e002      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004160:	bf00      	nop
 8004162:	e000      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004164:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004166:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800416e:	4b88      	ldr	r3, [pc, #544]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004170:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004174:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8004178:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800417c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004180:	4a83      	ldr	r2, [pc, #524]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004182:	430b      	orrs	r3, r1
 8004184:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800418e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004192:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	2100      	movs	r1, #0
 800419c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80041a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041a8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d055      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80041b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041ba:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80041be:	d031      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80041c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80041c4:	d82a      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041ca:	d02d      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80041cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041d0:	d824      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041d6:	d029      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80041d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041dc:	d81e      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e2:	d011      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80041e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e8:	d818      	bhi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80041ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041f2:	d113      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80041f8:	3308      	adds	r3, #8
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fed8 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004206:	e014      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800420c:	3330      	adds	r3, #48	@ 0x30
 800420e:	4618      	mov	r0, r3
 8004210:	f000 ff66 	bl	80050e0 <RCCEx_PLL3_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800421a:	e00a      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004222:	e006      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004224:	bf00      	nop
 8004226:	e004      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004228:	bf00      	nop
 800422a:	e002      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800422c:	bf00      	nop
 800422e:	e000      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004232:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800423a:	4b55      	ldr	r3, [pc, #340]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800423c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004240:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004244:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004248:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800424c:	4a50      	ldr	r2, [pc, #320]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800424e:	430b      	orrs	r3, r1
 8004250:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004254:	e003      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800425a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800425e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	2100      	movs	r1, #0
 8004268:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800426c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004270:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004274:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004278:	460b      	mov	r3, r1
 800427a:	4313      	orrs	r3, r2
 800427c:	d055      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800427e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004282:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004286:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800428a:	d031      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800428c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004290:	d82a      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004296:	d02d      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429c:	d824      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800429e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042a2:	d029      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80042a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042a8:	d81e      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80042aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ae:	d011      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80042b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042b4:	d818      	bhi.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d020      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80042ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042be:	d113      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042c4:	3308      	adds	r3, #8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fe72 	bl	8004fb0 <RCCEx_PLL2_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80042d2:	e014      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80042d8:	3330      	adds	r3, #48	@ 0x30
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 ff00 	bl	80050e0 <RCCEx_PLL3_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80042e6:	e00a      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80042ee:	e006      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042f0:	bf00      	nop
 80042f2:	e004      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042f4:	bf00      	nop
 80042f6:	e002      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80042fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004306:	4b22      	ldr	r3, [pc, #136]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004308:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800430c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004310:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004314:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004318:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800431a:	430b      	orrs	r3, r1
 800431c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004322:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004326:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800432a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004336:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800433a:	2300      	movs	r3, #0
 800433c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004340:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004344:	460b      	mov	r3, r1
 8004346:	4313      	orrs	r3, r2
 8004348:	d055      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800434a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800434e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004352:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004356:	d035      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004358:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800435c:	d82e      	bhi.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800435e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004362:	d031      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004364:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004368:	d828      	bhi.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800436a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800436e:	d01b      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004374:	d822      	bhi.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437e:	d009      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004380:	e01c      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004382:	4b03      	ldr	r3, [pc, #12]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	4a02      	ldr	r2, [pc, #8]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800438c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800438e:	e01c      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004390:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004394:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004398:	3308      	adds	r3, #8
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fe08 	bl	8004fb0 <RCCEx_PLL2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043a6:	e010      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043ac:	3330      	adds	r3, #48	@ 0x30
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fe96 	bl	80050e0 <RCCEx_PLL3_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043ba:	e006      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80043c2:	e002      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80043c4:	bf00      	nop
 80043c6:	e000      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80043c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10d      	bne.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80043d2:	4bc3      	ldr	r3, [pc, #780]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80043d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80043dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043e4:	4abe      	ldr	r2, [pc, #760]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80043ec:	e003      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80043f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80043f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80043fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fe:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004402:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004406:	2300      	movs	r3, #0
 8004408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800440c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d051      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004416:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800441a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800441e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004422:	d033      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004428:	d82c      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800442a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800442e:	d02d      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004430:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004434:	d826      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004436:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800443a:	d019      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800443c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004440:	d820      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004446:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800444a:	d007      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800444c:	e01a      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444e:	4ba4      	ldr	r3, [pc, #656]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004452:	4aa3      	ldr	r2, [pc, #652]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004458:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800445a:	e018      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800445c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004460:	3308      	adds	r3, #8
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fda4 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800446e:	e00e      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004474:	3330      	adds	r3, #48	@ 0x30
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fe32 	bl	80050e0 <RCCEx_PLL3_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004482:	e004      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10d      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004496:	4b92      	ldr	r3, [pc, #584]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800449c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80044a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80044a8:	4a8d      	ldr	r2, [pc, #564]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044aa:	430b      	orrs	r3, r1
 80044ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80044b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80044ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044c8:	2300      	movs	r3, #0
 80044ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044d0:	460b      	mov	r3, r1
 80044d2:	4313      	orrs	r3, r2
 80044d4:	d032      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80044d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80044de:	2b05      	cmp	r3, #5
 80044e0:	d80f      	bhi.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d211      	bcs.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d911      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d109      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80044f2:	3308      	adds	r3, #8
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 fd5b 	bl	8004fb0 <RCCEx_PLL2_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004500:	e006      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004508:	e002      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800450a:	bf00      	nop
 800450c:	e000      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800450e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004510:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10d      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004518:	4b71      	ldr	r3, [pc, #452]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800451a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800451e:	f023 0107 	bic.w	r1, r3, #7
 8004522:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004526:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800452a:	4a6d      	ldr	r2, [pc, #436]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800452c:	430b      	orrs	r3, r1
 800452e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004532:	e003      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004534:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004538:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800453c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	2100      	movs	r1, #0
 8004546:	6739      	str	r1, [r7, #112]	@ 0x70
 8004548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454c:	677b      	str	r3, [r7, #116]	@ 0x74
 800454e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d024      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004558:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800455c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004564:	2b08      	cmp	r3, #8
 8004566:	d005      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800456e:	e002      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004576:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800457e:	4b58      	ldr	r3, [pc, #352]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004584:	f023 0108 	bic.w	r1, r3, #8
 8004588:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800458c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004590:	4a53      	ldr	r2, [pc, #332]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004592:	430b      	orrs	r3, r1
 8004594:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800459e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80045ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b0:	2300      	movs	r3, #0
 80045b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f000 80b9 	beq.w	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80045c0:	4b48      	ldr	r3, [pc, #288]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	4a47      	ldr	r2, [pc, #284]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045cc:	f7fc fbbe 	bl	8000d4c <HAL_GetTick>
 80045d0:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045d4:	e00b      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fc fbb9 	bl	8000d4c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d903      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80045ec:	e005      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80045ee:	4b3d      	ldr	r3, [pc, #244]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ed      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80045fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f040 8093 	bne.w	800472a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004604:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800460a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800460e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004612:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d023      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800461a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800461e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8004622:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004626:	4293      	cmp	r3, r2
 8004628:	d01b      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800462c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004634:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004638:	4b29      	ldr	r3, [pc, #164]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800463a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800463e:	4a28      	ldr	r2, [pc, #160]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004644:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004648:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800464a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464e:	4a24      	ldr	r2, [pc, #144]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004654:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004658:	4a21      	ldr	r2, [pc, #132]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800465a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800465e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004662:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d019      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466e:	f7fc fb6d 	bl	8000d4c <HAL_GetTick>
 8004672:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004676:	e00d      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fc fb68 	bl	8000d4c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004682:	1ad2      	subs	r2, r2, r3
 8004684:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004688:	429a      	cmp	r2, r3
 800468a:	d903      	bls.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8004692:	e006      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004694:	4b12      	ldr	r3, [pc, #72]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0ea      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80046a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d13a      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80046aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046ae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80046b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ba:	d115      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80046bc:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80046c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80046c8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80046d6:	4a02      	ldr	r2, [pc, #8]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046d8:	430b      	orrs	r3, r1
 80046da:	61d3      	str	r3, [r2, #28]
 80046dc:	e00a      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80046de:	bf00      	nop
 80046e0:	44020c00 	.word	0x44020c00
 80046e4:	44020800 	.word	0x44020800
 80046e8:	4b9f      	ldr	r3, [pc, #636]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4a9e      	ldr	r2, [pc, #632]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046ee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046f2:	61d3      	str	r3, [r2, #28]
 80046f4:	4b9c      	ldr	r3, [pc, #624]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046fa:	4a9b      	ldr	r2, [pc, #620]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004700:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004704:	4b98      	ldr	r3, [pc, #608]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004706:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 800470a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800470e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8004712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004716:	4a94      	ldr	r2, [pc, #592]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004718:	430b      	orrs	r3, r1
 800471a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800471e:	e008      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004720:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004724:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800472e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004732:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800473e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004740:	2300      	movs	r3, #0
 8004742:	667b      	str	r3, [r7, #100]	@ 0x64
 8004744:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d035      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800474e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004752:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004756:	2b30      	cmp	r3, #48	@ 0x30
 8004758:	d014      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800475a:	2b30      	cmp	r3, #48	@ 0x30
 800475c:	d80e      	bhi.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800475e:	2b20      	cmp	r3, #32
 8004760:	d012      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004762:	2b20      	cmp	r3, #32
 8004764:	d80a      	bhi.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800476a:	2b10      	cmp	r3, #16
 800476c:	d106      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476e:	4b7e      	ldr	r3, [pc, #504]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004772:	4a7d      	ldr	r2, [pc, #500]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004778:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800477a:	e008      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004782:	e004      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004784:	bf00      	nop
 8004786:	e002      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800478c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10d      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004796:	4b74      	ldr	r3, [pc, #464]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800479c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80047a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047a4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80047a8:	4a6f      	ldr	r2, [pc, #444]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047aa:	430b      	orrs	r3, r1
 80047ac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80047b0:	e003      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80047b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80047c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047c8:	2300      	movs	r3, #0
 80047ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047cc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d033      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80047d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047da:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d007      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80047e6:	e010      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	4a5e      	ldr	r2, [pc, #376]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047f2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80047f4:	e00d      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80047fa:	3308      	adds	r3, #8
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 fbd7 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004802:	4603      	mov	r3, r0
 8004804:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004808:	e003      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004812:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10d      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800481a:	4b53      	ldr	r3, [pc, #332]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800481c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004820:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004824:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004828:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800482c:	4a4e      	ldr	r2, [pc, #312]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800482e:	430b      	orrs	r3, r1
 8004830:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004834:	e003      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004836:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800483a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800483e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004846:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800484a:	653b      	str	r3, [r7, #80]	@ 0x50
 800484c:	2300      	movs	r3, #0
 800484e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004850:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d033      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800485a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800485e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004866:	2b80      	cmp	r3, #128	@ 0x80
 8004868:	d007      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800486a:	e010      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486c:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	4a3d      	ldr	r2, [pc, #244]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004876:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004878:	e00d      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800487a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800487e:	3308      	adds	r3, #8
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fb95 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004896:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800489e:	4b32      	ldr	r3, [pc, #200]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048a4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80048a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ac:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80048b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048b2:	430b      	orrs	r3, r1
 80048b4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80048b8:	e003      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80048be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80048c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80048ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d0:	2300      	movs	r3, #0
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d04a      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80048de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d827      	bhi.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80048ea:	a201      	add	r2, pc, #4	@ (adr r2, 80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80048ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f0:	08004905 	.word	0x08004905
 80048f4:	08004913 	.word	0x08004913
 80048f8:	08004927 	.word	0x08004927
 80048fc:	08004943 	.word	0x08004943
 8004900:	08004943 	.word	0x08004943
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004904:	4b18      	ldr	r3, [pc, #96]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	4a17      	ldr	r2, [pc, #92]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800490a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004910:	e018      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004912:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004916:	3308      	adds	r3, #8
 8004918:	4618      	mov	r0, r3
 800491a:	f000 fb49 	bl	8004fb0 <RCCEx_PLL2_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004924:	e00e      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004926:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800492a:	3330      	adds	r3, #48	@ 0x30
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fbd7 	bl	80050e0 <RCCEx_PLL3_Config>
 8004932:	4603      	mov	r3, r0
 8004934:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004938:	e004      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004940:	e000      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004942:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004944:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10f      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800494c:	4b06      	ldr	r3, [pc, #24]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800494e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004952:	f023 0107 	bic.w	r1, r3, #7
 8004956:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800495a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800495e:	4a02      	ldr	r2, [pc, #8]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004960:	430b      	orrs	r3, r1
 8004962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004966:	e005      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004968:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004970:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004974:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004980:	643b      	str	r3, [r7, #64]	@ 0x40
 8004982:	2300      	movs	r3, #0
 8004984:	647b      	str	r3, [r7, #68]	@ 0x44
 8004986:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800498a:	460b      	mov	r3, r1
 800498c:	4313      	orrs	r3, r2
 800498e:	f000 8081 	beq.w	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800499a:	2b20      	cmp	r3, #32
 800499c:	d85f      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800499e:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	08004a29 	.word	0x08004a29
 80049a8:	08004a5f 	.word	0x08004a5f
 80049ac:	08004a5f 	.word	0x08004a5f
 80049b0:	08004a5f 	.word	0x08004a5f
 80049b4:	08004a5f 	.word	0x08004a5f
 80049b8:	08004a5f 	.word	0x08004a5f
 80049bc:	08004a5f 	.word	0x08004a5f
 80049c0:	08004a5f 	.word	0x08004a5f
 80049c4:	08004a37 	.word	0x08004a37
 80049c8:	08004a5f 	.word	0x08004a5f
 80049cc:	08004a5f 	.word	0x08004a5f
 80049d0:	08004a5f 	.word	0x08004a5f
 80049d4:	08004a5f 	.word	0x08004a5f
 80049d8:	08004a5f 	.word	0x08004a5f
 80049dc:	08004a5f 	.word	0x08004a5f
 80049e0:	08004a5f 	.word	0x08004a5f
 80049e4:	08004a4b 	.word	0x08004a4b
 80049e8:	08004a5f 	.word	0x08004a5f
 80049ec:	08004a5f 	.word	0x08004a5f
 80049f0:	08004a5f 	.word	0x08004a5f
 80049f4:	08004a5f 	.word	0x08004a5f
 80049f8:	08004a5f 	.word	0x08004a5f
 80049fc:	08004a5f 	.word	0x08004a5f
 8004a00:	08004a5f 	.word	0x08004a5f
 8004a04:	08004a67 	.word	0x08004a67
 8004a08:	08004a5f 	.word	0x08004a5f
 8004a0c:	08004a5f 	.word	0x08004a5f
 8004a10:	08004a5f 	.word	0x08004a5f
 8004a14:	08004a5f 	.word	0x08004a5f
 8004a18:	08004a5f 	.word	0x08004a5f
 8004a1c:	08004a5f 	.word	0x08004a5f
 8004a20:	08004a5f 	.word	0x08004a5f
 8004a24:	08004a67 	.word	0x08004a67
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a28:	4bab      	ldr	r3, [pc, #684]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	4aaa      	ldr	r2, [pc, #680]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a34:	e018      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fab7 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a48:	e00e      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a4e:	3330      	adds	r3, #48	@ 0x30
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fb45 	bl	80050e0 <RCCEx_PLL3_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004a5c:	e004      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004a64:	e000      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004a66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a68:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10d      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004a70:	4b99      	ldr	r3, [pc, #612]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a82:	4a95      	ldr	r2, [pc, #596]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a8a:	e003      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004a90:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aa6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d04e      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004ab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004abc:	d02e      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac2:	d827      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ac4:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ac6:	d02b      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004ac8:	2bc0      	cmp	r3, #192	@ 0xc0
 8004aca:	d823      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004acc:	2b80      	cmp	r3, #128	@ 0x80
 8004ace:	d017      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004ad0:	2b80      	cmp	r3, #128	@ 0x80
 8004ad2:	d81f      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004ad8:	2b40      	cmp	r3, #64	@ 0x40
 8004ada:	d007      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004adc:	e01a      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ade:	4b7e      	ldr	r3, [pc, #504]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	4a7d      	ldr	r2, [pc, #500]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004aea:	e01a      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004af0:	3308      	adds	r3, #8
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fa5c 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004afe:	e010      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b04:	3330      	adds	r3, #48	@ 0x30
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 faea 	bl	80050e0 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004b12:	e006      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10d      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b30:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b3c:	4a66      	ldr	r2, [pc, #408]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b44:	e003      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b4a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b60:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d055      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004b72:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b76:	d031      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004b78:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004b7c:	d82a      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b82:	d02d      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004b84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b88:	d824      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b8e:	d029      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004b90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004b94:	d81e      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9a:	d011      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba0:	d818      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d020      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004baa:	d113      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f9fc 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004bbe:	e014      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc4:	3330      	adds	r3, #48	@ 0x30
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa8a 	bl	80050e0 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e00a      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004bda:	e006      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004bdc:	bf00      	nop
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10d      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004bf2:	4b39      	ldr	r3, [pc, #228]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004bf8:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c00:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004c04:	4a34      	ldr	r2, [pc, #208]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c06:	430b      	orrs	r3, r1
 8004c08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c0c:	e003      	b.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004c12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004c22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c24:	2300      	movs	r3, #0
 8004c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	d058      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c3a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c3e:	d031      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004c40:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004c44:	d82a      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c4a:	d02d      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c50:	d824      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c56:	d029      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004c58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c5c:	d81e      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c62:	d011      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c68:	d818      	bhi.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d020      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c72:	d113      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c78:	3308      	adds	r3, #8
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f998 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004c80:	4603      	mov	r3, r0
 8004c82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004c86:	e014      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c8c:	3330      	adds	r3, #48	@ 0x30
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fa26 	bl	80050e0 <RCCEx_PLL3_Config>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ca2:	e006      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004ca4:	bf00      	nop
 8004ca6:	e004      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004ca8:	bf00      	nop
 8004caa:	e002      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004cac:	bf00      	nop
 8004cae:	e000      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d110      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004cba:	4b07      	ldr	r3, [pc, #28]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cc0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ccc:	4902      	ldr	r1, [pc, #8]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004cd6:	bf00      	nop
 8004cd8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ce0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ce4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	2100      	movs	r1, #0
 8004cee:	6239      	str	r1, [r7, #32]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	d055      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d08:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d0c:	d031      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004d0e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004d12:	d82a      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d18:	d02d      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004d1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d1e:	d824      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d20:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004d24:	d029      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004d26:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004d2a:	d81e      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d30:	d011      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d36:	d818      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d020      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d40:	d113      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d46:	3308      	adds	r3, #8
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f931 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d54:	e014      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d5a:	3330      	adds	r3, #48	@ 0x30
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 f9bf 	bl	80050e0 <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d68:	e00a      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d72:	bf00      	nop
 8004d74:	e004      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d80:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10d      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004d88:	4b88      	ldr	r3, [pc, #544]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d8e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d9a:	4984      	ldr	r1, [pc, #528]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004da2:	e003      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004da8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	2100      	movs	r1, #0
 8004db6:	61b9      	str	r1, [r7, #24]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d03d      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d81c      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dda:	bf00      	nop
 8004ddc:	08004e17 	.word	0x08004e17
 8004de0:	08004ded 	.word	0x08004ded
 8004de4:	08004dfb 	.word	0x08004dfb
 8004de8:	08004e17 	.word	0x08004e17
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dec:	4b6f      	ldr	r3, [pc, #444]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	4a6e      	ldr	r2, [pc, #440]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004df6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004df8:	e00e      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dfe:	3308      	adds	r3, #8
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f8d5 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004e0c:	e004      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e14:	e000      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e18:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10d      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004e20:	4b62      	ldr	r3, [pc, #392]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004e32:	495e      	ldr	r1, [pc, #376]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004e3a:	e003      	b.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e40:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	6139      	str	r1, [r7, #16]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d03a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e6c:	d00e      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e72:	d815      	bhi.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d017      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e7c:	d110      	bne.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	4a4a      	ldr	r2, [pc, #296]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e88:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e8a:	e00e      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e90:	3308      	adds	r3, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f88c 	bl	8004fb0 <RCCEx_PLL2_Config>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e9e:	e004      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10d      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ec0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004ec4:	4939      	ldr	r1, [pc, #228]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004ecc:	e003      	b.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ece:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ed2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004eec:	460b      	mov	r3, r1
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	d038      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ef6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004efa:	2b30      	cmp	r3, #48	@ 0x30
 8004efc:	d01b      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004efe:	2b30      	cmp	r3, #48	@ 0x30
 8004f00:	d815      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004f02:	2b10      	cmp	r3, #16
 8004f04:	d002      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d007      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004f0a:	e010      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f0c:	4b27      	ldr	r3, [pc, #156]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	4a26      	ldr	r2, [pc, #152]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f16:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f18:	e00e      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f1e:	3330      	adds	r3, #48	@ 0x30
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 f8dd 	bl	80050e0 <RCCEx_PLL3_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004f2c:	e004      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f34:	e000      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10d      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004f40:	4b1a      	ldr	r3, [pc, #104]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004f52:	4916      	ldr	r1, [pc, #88]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004f5a:	e003      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f60:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	6039      	str	r1, [r7, #0]
 8004f70:	f003 0308 	and.w	r3, r3, #8
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d00c      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004f80:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004f86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f8e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8004f92:	4906      	ldr	r1, [pc, #24]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8004f9a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004faa:	bf00      	nop
 8004fac:	44020c00 	.word	0x44020c00

08004fb0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8004fb8:	4b48      	ldr	r3, [pc, #288]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a47      	ldr	r2, [pc, #284]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8004fbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fc4:	f7fb fec2 	bl	8000d4c <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fca:	e008      	b.n	8004fde <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fcc:	f7fb febe 	bl	8000d4c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e07a      	b.n	80050d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fde:	4b3f      	ldr	r3, [pc, #252]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004fea:	4b3c      	ldr	r3, [pc, #240]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6811      	ldr	r1, [r2, #0]
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6852      	ldr	r2, [r2, #4]
 8004ffe:	0212      	lsls	r2, r2, #8
 8005000:	430a      	orrs	r2, r1
 8005002:	4936      	ldr	r1, [pc, #216]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	3b01      	subs	r3, #1
 800500e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	025b      	lsls	r3, r3, #9
 800501a:	b29b      	uxth	r3, r3
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	3b01      	subs	r3, #1
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	3b01      	subs	r3, #1
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005038:	4928      	ldr	r1, [pc, #160]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800503e:	4b27      	ldr	r3, [pc, #156]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005042:	f023 020c 	bic.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	4924      	ldr	r1, [pc, #144]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005050:	4b22      	ldr	r3, [pc, #136]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	f023 0220 	bic.w	r2, r3, #32
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	491f      	ldr	r1, [pc, #124]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005062:	4b1e      	ldr	r3, [pc, #120]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	491c      	ldr	r1, [pc, #112]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 800506c:	4313      	orrs	r3, r2
 800506e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005070:	4b1a      	ldr	r3, [pc, #104]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	4a19      	ldr	r2, [pc, #100]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005076:	f023 0310 	bic.w	r3, r3, #16
 800507a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800507c:	4b17      	ldr	r3, [pc, #92]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005084:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6a12      	ldr	r2, [r2, #32]
 800508c:	00d2      	lsls	r2, r2, #3
 800508e:	4913      	ldr	r1, [pc, #76]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005090:	4313      	orrs	r3, r2
 8005092:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005094:	4b11      	ldr	r3, [pc, #68]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	4a10      	ldr	r2, [pc, #64]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 800509a:	f043 0310 	orr.w	r3, r3, #16
 800509e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80050a0:	4b0e      	ldr	r3, [pc, #56]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0d      	ldr	r2, [pc, #52]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 80050a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050ac:	f7fb fe4e 	bl	8000d4c <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050b4:	f7fb fe4a 	bl	8000d4c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e006      	b.n	80050d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <RCCEx_PLL2_Config+0x12c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80050d2:	2300      	movs	r3, #0

}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	44020c00 	.word	0x44020c00

080050e0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80050e8:	4b48      	ldr	r3, [pc, #288]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a47      	ldr	r2, [pc, #284]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050f4:	f7fb fe2a 	bl	8000d4c <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050fa:	e008      	b.n	800510e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050fc:	f7fb fe26 	bl	8000d4c <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b02      	cmp	r3, #2
 8005108:	d901      	bls.n	800510e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e07a      	b.n	8005204 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800510e:	4b3f      	ldr	r3, [pc, #252]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800511a:	4b3c      	ldr	r3, [pc, #240]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005122:	f023 0303 	bic.w	r3, r3, #3
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	6811      	ldr	r1, [r2, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6852      	ldr	r2, [r2, #4]
 800512e:	0212      	lsls	r2, r2, #8
 8005130:	430a      	orrs	r2, r1
 8005132:	4936      	ldr	r1, [pc, #216]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 8005134:	4313      	orrs	r3, r2
 8005136:	630b      	str	r3, [r1, #48]	@ 0x30
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	3b01      	subs	r3, #1
 800513e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	025b      	lsls	r3, r3, #9
 800514a:	b29b      	uxth	r3, r3
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	3b01      	subs	r3, #1
 8005154:	041b      	lsls	r3, r3, #16
 8005156:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	3b01      	subs	r3, #1
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005168:	4928      	ldr	r1, [pc, #160]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 800516a:	4313      	orrs	r3, r2
 800516c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800516e:	4b27      	ldr	r3, [pc, #156]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	f023 020c 	bic.w	r2, r3, #12
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	4924      	ldr	r1, [pc, #144]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 800517c:	4313      	orrs	r3, r2
 800517e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005180:	4b22      	ldr	r3, [pc, #136]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005184:	f023 0220 	bic.w	r2, r3, #32
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	491f      	ldr	r1, [pc, #124]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 800518e:	4313      	orrs	r3, r2
 8005190:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005192:	4b1e      	ldr	r3, [pc, #120]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 8005194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	491c      	ldr	r1, [pc, #112]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 800519c:	4313      	orrs	r3, r2
 800519e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80051a0:	4b1a      	ldr	r3, [pc, #104]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	4a19      	ldr	r2, [pc, #100]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80051ac:	4b17      	ldr	r3, [pc, #92]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051b4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6a12      	ldr	r2, [r2, #32]
 80051bc:	00d2      	lsls	r2, r2, #3
 80051be:	4913      	ldr	r1, [pc, #76]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80051c4:	4b11      	ldr	r3, [pc, #68]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c8:	4a10      	ldr	r2, [pc, #64]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051ca:	f043 0310 	orr.w	r3, r3, #16
 80051ce:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80051d0:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a0d      	ldr	r2, [pc, #52]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051dc:	f7fb fdb6 	bl	8000d4c <HAL_GetTick>
 80051e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051e2:	e008      	b.n	80051f6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051e4:	f7fb fdb2 	bl	8000d4c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e006      	b.n	8005204 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051f6:	4b05      	ldr	r3, [pc, #20]	@ (800520c <RCCEx_PLL3_Config+0x12c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	44020c00 	.word	0x44020c00

08005210 <memset>:
 8005210:	4402      	add	r2, r0
 8005212:	4603      	mov	r3, r0
 8005214:	4293      	cmp	r3, r2
 8005216:	d100      	bne.n	800521a <memset+0xa>
 8005218:	4770      	bx	lr
 800521a:	f803 1b01 	strb.w	r1, [r3], #1
 800521e:	e7f9      	b.n	8005214 <memset+0x4>

08005220 <__libc_init_array>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4d0d      	ldr	r5, [pc, #52]	@ (8005258 <__libc_init_array+0x38>)
 8005224:	2600      	movs	r6, #0
 8005226:	4c0d      	ldr	r4, [pc, #52]	@ (800525c <__libc_init_array+0x3c>)
 8005228:	1b64      	subs	r4, r4, r5
 800522a:	10a4      	asrs	r4, r4, #2
 800522c:	42a6      	cmp	r6, r4
 800522e:	d109      	bne.n	8005244 <__libc_init_array+0x24>
 8005230:	4d0b      	ldr	r5, [pc, #44]	@ (8005260 <__libc_init_array+0x40>)
 8005232:	2600      	movs	r6, #0
 8005234:	4c0b      	ldr	r4, [pc, #44]	@ (8005264 <__libc_init_array+0x44>)
 8005236:	f000 f817 	bl	8005268 <_init>
 800523a:	1b64      	subs	r4, r4, r5
 800523c:	10a4      	asrs	r4, r4, #2
 800523e:	42a6      	cmp	r6, r4
 8005240:	d105      	bne.n	800524e <__libc_init_array+0x2e>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f855 3b04 	ldr.w	r3, [r5], #4
 8005248:	3601      	adds	r6, #1
 800524a:	4798      	blx	r3
 800524c:	e7ee      	b.n	800522c <__libc_init_array+0xc>
 800524e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005252:	3601      	adds	r6, #1
 8005254:	4798      	blx	r3
 8005256:	e7f2      	b.n	800523e <__libc_init_array+0x1e>
 8005258:	080052b0 	.word	0x080052b0
 800525c:	080052b0 	.word	0x080052b0
 8005260:	080052b0 	.word	0x080052b0
 8005264:	080052b4 	.word	0x080052b4

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
